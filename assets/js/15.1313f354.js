(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{338:function(t,n,a){"use strict";a.r(n);var r=a(33),e=Object(r.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第-7-章-排序算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第-7-章-排序算法"}},[t._v("#")]),t._v(" 第 7 章 排序算法")]),t._v(" "),a("h2",{attrs:{id:"_7-1-排序算法的介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-排序算法的介绍"}},[t._v("#")]),t._v(" 7.1 排序算法的介绍")]),t._v(" "),a("blockquote",[a("p",[t._v("排序也称排序算法(Sort Algorithm)，排序是将一组数据，依指定的顺序进行排列的过程。")])]),t._v(" "),a("h2",{attrs:{id:"_7-2-排序的分类："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-排序的分类："}},[t._v("#")]),t._v(" 7.2 排序的分类：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 内部排序:\n\t指将需要处理的所有数据都加载到内部存储器(内存)中进行排序。\n2) 外部排序法：\n\t数据量过大，无法全部加载到内存中，需要借助外部存储(文件等)进行排序。\n3) 常见的排序算法分类(见下图):\n")])])]),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/1.jpg",alt:"排序分类"}})]),t._v(" "),a("h2",{attrs:{id:"_7-3-算法的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-算法的时间复杂度"}},[t._v("#")]),t._v(" 7.3 算法的时间复杂度")]),t._v(" "),a("h3",{attrs:{id:"_7-31度量一个程序-算法-执行时间的两种方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-31度量一个程序-算法-执行时间的两种方法"}},[t._v("#")]),t._v(" 7.31度量一个程序(算法)执行时间的两种方法")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 事后统计的方法\n   这种方法可行, 但是有两个问题：一是要想对设计的算法的运行性能进行评测，需要实际运行该程序；二是所\n得时间的统计量依赖于计算机的硬件、软件等环境因素, 这种方式，要在同一台计算机的相同状态下运行，才能比\n较那个算法速度更快。\n2) 事前估算的方法\n通过分析某个算法的时间复杂度来判断哪个算法更优. \n")])])]),a("h3",{attrs:{id:"_7-3-2时间频度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-2时间频度"}},[t._v("#")]),t._v(" 7.3.2时间频度")]),t._v(" "),a("blockquote",[a("p",[t._v("基本介绍\n时间频度：一个算法花费的时间与算法中语句的执行次数成正比例，哪个算法中语句执行次数多，它花费时间\n就多。一个算法中的语句执行次数称为语句频度或时间频度。记为 T(n)。[举例说明]\n举例说明-基本案例\n比如计算 1-0 所有数字之和, 我们设计两种算法：\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/2.jpg",alt:"数字之和"}})])]),t._v(" "),a("blockquote",[a("p",[t._v("举例说明-忽略常数项")])]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/3.jpg",alt:"常数项"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("结论:\n 1) 2n+20 和 2n 随着 n 变大，执行曲线无限接近, 20 可以忽略\n 2) 3n+10 和 3n 随着 n 变大，执行曲线无限接近, 10 可以忽略\n")])])]),a("blockquote",[a("p",[t._v("举例说明-忽略低次项\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/4.jpg",alt:"忽略低次项"}}),t._v("\n结论:\n1) 2n^2+3n+10 和 2n^2 随着 n 变大, 执行曲线无限接近, 可以忽略 3n+10\n2) n^2+5n+20 和 n^2 随着 n 变大,执行曲线无限接近, 可以忽略 5n+20")])]),t._v(" "),a("blockquote",[a("p",[t._v("举例说明-忽略系数\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/5.jpg",alt:"忽略系数"}}),t._v("\n结论:\n1) 随着 n 值变大，5n^2+7n 和 3n^2 + 2n ，执行曲线重合, 说明 这种情况下, 5 和 3 可以忽略。\n2) 而 n^3+5n 和 6n^3+4n ，执行曲线分离，说明多少次方式关键")])]),t._v(" "),a("h2",{attrs:{id:"_7-3时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3时间复杂度"}},[t._v("#")]),t._v(" 7.3时间复杂度")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 一般情况下，算法中的基本操作语句的重复执行次数是问题规模 n 的某个函数，用 T(n)表示，若有某个辅\n   助函数 f(n)，使得当 n 趋近于无穷大时，T(n) / f(n) 的极限值为不等于零的常数，则称 f(n)是 T(n)的同数量级函数。\n   记作 T(n)=Ｏ( fn)，称Ｏ( fn) 为算法的渐进时间复杂度，简称时间复杂度。\n2) T(n) 不同，但时间复杂度可能相同。 如：T(n)=²+7n+6 与 T(n)=3n²+2n+2 它们的 T(n) 不同，但时间复杂\n   度相同，都为 O(n²)。\n3) 计算时间复杂度的方法：\n\t用常数 1 代替运行时间中的所有加法常数 T(n)=²+7n+6 => T(n)=²+7n+1\n\t修改后的运行次数函数中，只保留最高阶项 T(n)=²+7n+1 => T(n) = n²\n\t去除最高阶项的系数 T(n) = n² => T(n) = n² => O(n²)\n")])])]),a("h3",{attrs:{id:"_7-3-4-常见的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-4-常见的时间复杂度"}},[t._v("#")]),t._v(" 7.3.4 常见的时间复杂度")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 常数阶 O(1)\n2) 对数阶 O(log2n)\n3) 线性阶 O(n)\n4) 线性对数阶 O(nlog2n)\n5) 平方阶 O(n^2)\n6) 立方阶 O(n^3)\n7) k 次方阶 O(n^k)\n8) 指数阶 O(2^n)\n")])])]),a("blockquote",[a("p",[t._v("常见的时间复杂度对应的图:\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/6.jpg",alt:"时间复杂度对应图"}}),t._v("\n说明：\n(1) 常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜ Ο(nk) ＜\nΟ(2n) ，随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低\n(2) 从图中可见，我们应该尽可能避免使用指数阶的算法")])]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("常数阶 O(1)\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/7.jpg",alt:"常数阶"}})])])]),t._v(" "),a("blockquote",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("对数阶 O(log2n)\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/8.jpg",alt:"对数阶"}})])])]),t._v(" "),a("blockquote",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("线性阶 O(n)\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/9.jpg",alt:"线性阶"}})])])]),t._v(" "),a("blockquote",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("线性对数阶 O(nlogN)\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/10.jpg",alt:"线性对数阶"}})])])]),t._v(" "),a("blockquote",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("平方阶 O(n²)\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/11.jpg",alt:"平方阶"}})])])]),t._v(" "),a("blockquote",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("立方阶 O(n³)、K 次方阶 O(n^k)\n说明：参考上面的 O(n²) 去理解就好了，O(n³)相当于三层 n 循环，其它的类似")])])]),t._v(" "),a("h3",{attrs:{id:"_7-35-平均时间复杂度和最坏时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-35-平均时间复杂度和最坏时间复杂度"}},[t._v("#")]),t._v(" 7.35 平均时间复杂度和最坏时间复杂度")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 平均时间复杂度是指所有可能的输入实例均以等概率出现的情况下，该算法的运行时间。\n2) 最坏情况下的时间复杂度称最坏时间复杂度。一般讨论的时间复杂度均是最坏情况下的时间复杂度。这样做的\n   原因是：最坏情况下的时间复杂度是算法在任何输入实例上运行时间的界限，这就保证了算法的运行时间不会\n   比最坏情况更长。\n3) 平均时间复杂度和最坏时间复杂度是否一致，和算法有关(如图:)。\n")])])]),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/12.jpg",alt:"排序时间复杂度"}})]),t._v(" "),a("h2",{attrs:{id:"_7-4-算法的空间复杂度简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-算法的空间复杂度简介"}},[t._v("#")]),t._v(" 7.4 算法的空间复杂度简介")]),t._v(" "),a("h3",{attrs:{id:"_7-41基本介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-41基本介绍"}},[t._v("#")]),t._v(" 7.41基本介绍")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 类似于时间复杂度的讨论，一个算法的空间复杂度(Space Complexity)定义为该算法所耗费的存储空间，它也是\n   问题规模 n 的函数。\n2) 空间复杂度(Space Complexity)是对一个算法在运行过程中临时占用存储空间大小的量度。有的算法需要占用的\n   临时工作单元数与解决问题的规模 n 有关，它随着 n 的增大而增大，当 n 较大时，将占用较多的存储单元，例\n   如快速排序和归并排序算法, 基数排序就属于这种情况\n3) 在做算法分析时，主要讨论的是时间复杂度。从用户使用体验上看，更看重的程序执行的速度。一些缓存产品\n   (redis,  memcache)和算法(基数排序)本质就是用空间换时间.\t\n")])])]),a("h2",{attrs:{id:"_7-5-冒泡排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-冒泡排序"}},[t._v("#")]),t._v(" 7.5 冒泡排序")]),t._v(" "),a("h3",{attrs:{id:"_7-5-1基本介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-1基本介绍"}},[t._v("#")]),t._v(" 7.5.1基本介绍")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   冒泡排序（Bubble  Sorting）的基本思想是：通过对待排序序列从前向后（从下标较小的元素开始）,依次比较 \n相邻元素的值，若发现逆序则交换，使值较大的元素逐渐从前移向后部，就象水底下的气泡一样逐渐向上冒。\n优化： \n 因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序，\n 因此要在 排序过程中设置一个标志 flag 判断元素是否进行过交换。从而减少不必要的比较。(这里说的优化，可以在冒泡排 序写好后，在进行)\n")])])]),a("h3",{attrs:{id:"_7-5-2演示冒泡过程的例子-图解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-2演示冒泡过程的例子-图解"}},[t._v("#")]),t._v(" 7.5.2演示冒泡过程的例子(图解)")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/13.jpg",alt:"冒泡排序过程"}}),t._v(" "),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif",alt:"冒泡排序动图"}}),t._v("\n小结上面的图解过程:\n(1)一共进行数组的大小-1次大的循环\n(2)每一趟排序的次数在逐渐的减少\n(3)如果我们发现在某趟排序中，没有发生一次交换，可以提前结束冒泡排序。这个就是优化")]),t._v(" "),a("h3",{attrs:{id:"_7-5-3冒泡排序应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-3冒泡排序应用实例"}},[t._v("#")]),t._v(" 7.5.3冒泡排序应用实例")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("我们举一个具体的案例来说明冒泡法。我们将五个无序的数：2,5,1,3,8,5,7,4,3使用冒泡排序法将其排成一个从小 到大的有序数列。 \n代码实现:\nimport com.jiajia.ArrayUtil.*;  // 按包名导入\n\npublic class BubbleSortMain {\n\n    public static void main(String[] args) {\n        int[] arr = {2,5,1,3,8,5,7,4,3};\n        bubbleSort(arr);\n\n        ArrayUtil.print(arr);\n\n    }\n\n    /**\n     * 冒泡排序\n     * @param arr\n     */\n    private static void bubbleSort(int[] arr) {\n        if(arr==null || arr.length < 2 ){\n            return;\n        }\n        for (int i = 0; i < arr.length - 1; i++) {\n            for (int j = 0; j < arr.length - i -1; j++) {   // 这里说明为什么需要-1\n                if (arr[j] > arr[j + 1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n            }\n        }\n    }\n}\n")])])]),a("blockquote",[a("p",[t._v("算法分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度: O(N^2)")]),t._v(" "),a("li",[t._v("空间复杂度: O(1)")]),t._v(" "),a("li",[t._v("稳定性：稳定")])]),t._v(" "),a("h2",{attrs:{id:"_7-6-选择排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-选择排序"}},[t._v("#")]),t._v(" 7.6 选择排序")]),t._v(" "),a("h3",{attrs:{id:"_7-61基本介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-61基本介绍"}},[t._v("#")]),t._v(" 7.61基本介绍")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   选择式排序也属于内部排序法，是从欲排序的数据中，按指定的规则选出某一元素，再依规定交换位置后达到\n排序的目的。\n")])])]),a("h3",{attrs:{id:"_7-62选择排序思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-62选择排序思想"}},[t._v("#")]),t._v(" 7.62选择排序思想:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   选择排序（selct sorting）也是一种简单的排序方法。它的基本思想是：第一次从 ar[0]~ar[n-1]中选取最小值，\n与 ar[0]交换，第二次从 ar[1]~ar[n-1]中选取最小值，与 ar[1]交换，第三次从 ar[2]~ar[n-1]中选取最小值，与 ar[2]\n交换，…，第 i 次从 ar[i-1]~ar[n-1]中选取最小值，与 ar[i-1]交换，…, 第 n-1 次从 ar[n-2]~ar[n-1]中选取最小值，\n与 ar[n-2]交换，总共通过 n-1 次，得到一个按排序码从小到大排列的有序列。\n")])])]),a("h3",{attrs:{id:"_7-63选择排序思路分析图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-63选择排序思路分析图"}},[t._v("#")]),t._v(" 7.63选择排序思路分析图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/14.jpg",alt:"选择排序思路"}})]),t._v(" "),a("blockquote",[a("p",[t._v("对一个数组的选择排序再进行讲解\n"),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/15.jpg",alt:"思路图解"}})])]),t._v(" "),a("h3",{attrs:{id:"_7-64选择排序应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-64选择排序应用实例"}},[t._v("#")]),t._v(" 7.64选择排序应用实例:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("请使用选择排序从低到高进行排序{2,5,4,3,8,6,4}\n")])])]),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif",alt:"选择排序动图"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('代码实现:\npublic class Main {\n\n    public  static void main(String[] args) {\n\n        int[] arr = {2,5,4,3,8,6,4};\n        selectSort(arr);\n        for (int i = 0; i< arr.length; i++){\n            System.out.print(arr[i] + ",");\n        }\n    }\n\n    /**\n     * 选择排序\n     * @param arr\n     */\n    private static void selectSort(int[] arr) {\n        for (int i = 0,k =0; i < arr.length; i++, k = i){\n            // 这一层查找后面最小值的下标\n            for (int j = i+1; j <arr.length; j++) {\n                if (arr[k] > arr[j]) {  // 这个改为小与符合即为从大到小\n                    k = j;\n                }\n            }\n            // 交换值\n            if( i != k) {\n                int temp = arr[i];\n                arr[i] = arr[k];\n                arr[k] = temp;\n            }\n        }\n    }\n}\n')])])]),a("blockquote",[a("p",[t._v("算法分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度：O(N^2)")]),t._v(" "),a("li",[t._v("空间复杂度: O(1)")]),t._v(" "),a("li",[t._v("稳定性： 不稳定")])]),t._v(" "),a("h2",{attrs:{id:"_7-7-插入排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-插入排序"}},[t._v("#")]),t._v(" 7.7 插入排序")]),t._v(" "),a("h3",{attrs:{id:"_7-1插入排序法介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-1插入排序法介绍"}},[t._v("#")]),t._v(" 7.1插入排序法介绍:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("插入式排序属于内部排序法，是对于欲排序的元素以插入的方式找寻该元素的适当位置，以达到排序的目的。\n")])])]),a("h3",{attrs:{id:"_7-7-2插入排序法思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-2插入排序法思想"}},[t._v("#")]),t._v(" 7.7.2插入排序法思想:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   插入排序（Insertion Sorting）的基本思想是：把 n 个待排序的元素看成为一个有序表和一个无序表，开始时有\n序表中只包含一个元素，无序表中包含有 n-1 个元素，排序过程中每次从无序表中取出第一个元素，把它的排\n序码依次与有序表元素的排序码进行比较，将它插入到有序表中的适当位置，使之成为新的有序表。\n")])])]),a("h3",{attrs:{id:"_7-7-3-插入排序思路图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-3-插入排序思路图"}},[t._v("#")]),t._v(" 7.7.3 插入排序思路图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/16.jpg",alt:"插入思路图"}})]),t._v(" "),a("h3",{attrs:{id:"_7-7-4插入排序法应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-4插入排序法应用实例"}},[t._v("#")]),t._v(" 7.7.4插入排序法应用实例:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif",alt:"插入排序动图"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("代码实现：\n/**\n * 插入排序\n * @param arr\n */\npublic static void insertSort(int[] arr) {\n\tif(arr == null || arr.length == 0) \n\t\treturn;\n\tint curEle, preIndex; // 记录当前待排序元素和前一个元素的下标\n\tfor(int i = 0; i < arr.length; i++) {\n\t\tpreIndex = i - 1;\n\t\tcurEle = arr[i];\n\t\twhile(preIndex >=0 && arr[preIndex] > curEle){\n\t\t\tarr[preIndex + 1] = arr[preIndex]; // 移动元素\n\t\t\tpreIndex--;\n\t\t}\n\t\t// 将待排序元素插入新的位置\n\t\tarr[preIndex + 1] = curEle;\n\t}\n}\n")])])]),a("blockquote",[a("p",[t._v("算法分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度：O(n^2)")]),t._v(" "),a("li",[t._v("空间复杂度：O(1)")]),t._v(" "),a("li",[t._v("稳定性：稳定")])]),t._v(" "),a("h2",{attrs:{id:"_7-8-希尔排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-希尔排序"}},[t._v("#")]),t._v(" 7.8 希尔排序")]),t._v(" "),a("h3",{attrs:{id:"_7-8-1简单插入排序存在的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-1简单插入排序存在的问题"}},[t._v("#")]),t._v(" 7.8.1简单插入排序存在的问题")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("我们看简单的插入排序可能存在的问题. 数组 ar = {2,34,56,1} 这时需要插入的\n我们看简单的插入排序可能存在的问题. 数组 ar = {2,34,56,1} 这时需要插入的数 1(最小), 这样的过程是：\n{2,34,56,}\n{2,34,5,6}\n{2,34,5,6}\n{2,3,45,6}\n{2,3,45,6}\n{1,23,45,6}\n\n结论: 当需要插入的数是较小的数时，后移的次数明显增多，对效率有影响.\n")])])]),a("h3",{attrs:{id:"_7-8-2希尔排序法介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-2希尔排序法介绍"}},[t._v("#")]),t._v(" 7.8.2希尔排序法介绍")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   希尔排序是希尔（Donald  Shell）于  1959  年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入\n排序经过改进之后的一个更高效的版本，也称为缩小增量排序。\n")])])]),a("h3",{attrs:{id:"_7-8-3希尔排序法基本思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-3希尔排序法基本思想"}},[t._v("#")]),t._v(" 7.8.3希尔排序法基本思想")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含\n的关键词越来越多，当增量减至 1  时，整个文件恰被分成一组，算法便终止\n")])])]),a("h3",{attrs:{id:"_7-8-4希尔排序法的示意图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-4希尔排序法的示意图"}},[t._v("#")]),t._v(" 7.8.4希尔排序法的示意图")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/17.jpg",alt:"希尔排序示意图"}}),t._v(" "),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/18.jpg",alt:"希尔排序示意图"}})]),t._v(" "),a("h3",{attrs:{id:"_7-8-5希尔排序法应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-5希尔排序法应用实例"}},[t._v("#")]),t._v(" 7.8.5希尔排序法应用实例:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif",alt:"希尔排序动图"}}),t._v("\n考试成绩分别是    {8,9,1,7,2,3,5,4,6,0}请从小到大排序.\n1)   希尔排序时,对有序序列在插入时采用交换法,并测试排序速度.\n2)   希尔排序时,对有序序列在插入时采用移动法,并测试排序速度\n3)   代码实现\npackage com.lyg.seven;")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('import java.text.SimpleDateFormat;\nimport java.util.Date;\n\n/**\n * @program: DataStructure\n * @description:\n * @author: LvYangai\n * @create: 2020-07-03 14:59\n * @e-mail: 1076977275@qq.com\n **/\npublic class ShellSort {\n\n    public static void main(String[] args) {\n        //int[] arr = { 8, 9, 1, 7, 2, 3, 5, 4, 6, 0 };\n\n        // 创建要给80000个的随机的数组\n        int[] arr = new int[8000000];\n        for (int i = 0; i < 8000000; i++) {\n            arr[i] = (int) (Math.random() * 8000000); // 生成一个[0, 8000000) 数\n        }\n\n        System.out.println("排序前");\n        Date data1 = new Date();\n        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n        String date1Str = simpleDateFormat.format(data1);\n        System.out.println("排序前的时间是=" + date1Str);\n\n        //shellSort(arr); //交换式\n        shellSort2(arr);//移位方式\n\n        Date data2 = new Date();\n        String date2Str = simpleDateFormat.format(data2);\n        System.out.println("排序前的时间是=" + date2Str);\n\n        //System.out.println(Arrays.toString(arr));\n    }\n\n    // 使用逐步推导的方式来编写希尔排序\n    // 希尔排序时， 对有序序列在插入时采用交换法, \n    // 思路(算法) ===> 代码\n    public static void shellSort(int[] arr) {\n\n        int temp = 0;\n        int count = 0;\n        // 根据前面的逐步分析，使用循环处理\n        for (int gap = arr.length / 2; gap > 0; gap /= 2) {\n            for (int i = gap; i < arr.length; i++) {\n                // 遍历各组中所有的元素(共gap组，每组有个元素), 步长gap\n                for (int j = i - gap; j >= 0; j -= gap) {\n                    // 如果当前元素大于加上步长后的那个元素，说明交换\n                    if (arr[j] > arr[j + gap]) {\n                        temp = arr[j];\n                        arr[j] = arr[j + gap];\n                        arr[j + gap] = temp;\n                    }\n                }\n            }\n            //System.out.println("希尔排序第" + (++count) + "轮 =" + Arrays.toString(arr));\n        }\n\n    }\n\n    //对交换式的希尔排序进行优化->移位法\n    public static void shellSort2(int[] arr) {\n\n        // 增量gap, 并逐步的缩小增量\n        for (int gap = arr.length / 2; gap > 0; gap /= 2) {\n            // 从第gap个元素，逐个对其所在的组进行直接插入排序\n            for (int i = gap; i < arr.length; i++) {\n                int j = i;\n                int temp = arr[j];\n                if (arr[j] < arr[j - gap]) {\n                    while (j - gap >= 0 && temp < arr[j - gap]) {\n                        //移动\n                        arr[j] = arr[j-gap];\n                        j -= gap;\n                    }\n                    //当退出while后，就给temp找到插入的位置\n                    arr[j] = temp;\n                }\n\n            }\n        }\n    }\n\n}\n')])])]),a("blockquote",[a("p",[t._v("算法分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度：O(N*logN)")]),t._v(" "),a("li",[t._v("空间复杂度：O(1)")]),t._v(" "),a("li",[t._v("稳定性：不稳定")]),t._v(" "),a("li")]),t._v(" "),a("h2",{attrs:{id:"_7-9-快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-快速排序"}},[t._v("#")]),t._v(" 7.9 快速排序")]),t._v(" "),a("h3",{attrs:{id:"_7-9-1快速排序法介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-1快速排序法介绍"}},[t._v("#")]),t._v(" 7.9.1快速排序法介绍:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   快速排序（Quicksort）是对冒泡排序的一种改进。基本思想是：通过一趟排序将要排序的数据分割成独立的两 \n部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排\n序，整个排序过程可以递归进行，以此达到整个数据变成有序序列\n")])])]),a("h3",{attrs:{id:"_7-9-2快速排序法示意图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-2快速排序法示意图"}},[t._v("#")]),t._v(" 7.9.2快速排序法示意图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/19.jpg",alt:"快速排序示意图"}})]),t._v(" "),a("h3",{attrs:{id:"_7-9-3快速排序法应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-3快速排序法应用实例"}},[t._v("#")]),t._v(" 7.9.3快速排序法应用实例:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("要求:   \n   对{4,2,35,9,7,8,1,5,0,4,3}进行从小到大的排序，要求使用快速排序法。\n\n动图：\n")])])]),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif",alt:"快速排序示意图"}})]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("代码：\n\nimport com.jiajia.ArrayUtil.ArrayUtil;\n/**\n * @ClassName: QucikSort\n * @Author: fanjiajia\n * @Date: 2019/3/6 下午9:02\n * @Version: 1.0\n * @Description: 快速排序\n */\npublic class QucikSort {\n\n    public static void main(String[] args) {\n\n        int[] arr = {4,2,35,9,7,8,1,5,0,4,3};\n        quickSort(arr, 0, arr.length - 1);\n        ArrayUtil.print(arr);\n    }\n\n    private static  void quickSort(int[] arr, int left, int right){\n\n        if (left >= right) {    // 必须加\n            return;\n        }\n\n        int temp = arr[left]; // 以左边的元素为基准元素\n        int i = left, j = right; // i,j为两个游标\n        while (i < j) {\n            while (i < j && arr[j] >= temp){ // 右边先走\n                j--;\n            }\n            while (i < j && arr[i] <= temp) {\n                i++;\n            }\n            if (i < j) {\n                swap(arr, i, j);\n            }\n        }\n        arr[left] = arr[i]; // 注意，这一步必须要，填上最左边的坑\n        arr[i] = temp; // 基准元素就位\n        quickSort(arr, left, i - 1);    // 递归操作左边部分\n        quickSort(arr, i + 1, right);   // 递归操作右边部分\n    }\n\n    /**\n     * 交换两个元素\n     * @param arr\n     * @param i\n     * @param j\n     */\n    private static void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n//快速排序   尚硅谷老师写法\npublic static void quickSort(int[] arr,int left, int right) {\n\t\tint l = left; //左下标\n\t\tint r = right; //右下标\n\t\t//pivot 中轴值\n\t\tint pivot = arr[(left + right) / 2];\n\t\tint temp = 0; //临时变量，作为交换时使用\n\t\t//while循环的目的是让比pivot 值小放到左边\n\t\t//比pivot 值大放到右边\n\t\twhile( l < r) { \n\t\t\t//在pivot的左边一直找,找到大于等于pivot值,才退出\n\t\t\twhile( arr[l] < pivot) {\n\t\t\t\tl += 1;\n\t\t\t}\n\t\t\t//在pivot的右边一直找,找到小于等于pivot值,才退出\n\t\t\twhile(arr[r] > pivot) {\n\t\t\t\tr -= 1;\n\t\t\t}\n\t\t\t//如果l >= r说明pivot 的左右两的值，已经按照左边全部是\n\t\t\t//小于等于pivot值，右边全部是大于等于pivot值\n\t\t\tif( l >= r) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t//交换\n\t\t\ttemp = arr[l];\n\t\t\tarr[l] = arr[r];\n\t\t\tarr[r] = temp;\n\t\t\t\n\t\t\t//如果交换完后，发现这个arr[l] == pivot值 相等 r--， 前移\n\t\t\tif(arr[l] == pivot) {\n\t\t\t\tr -= 1;\n\t\t\t}\n\t\t\t//如果交换完后，发现这个arr[r] == pivot值 相等 l++， 后移\n\t\t\tif(arr[r] == pivot) {\n\t\t\t\tl += 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// 如果 l == r, 必须l++, r--, 否则为出现栈溢出\n\t\tif (l == r) {\n\t\t\tl += 1;\n\t\t\tr -= 1;\n\t\t}\n\t\t//向左递归\n\t\tif(left < r) {\n\t\t\tquickSort(arr, left, r);\n\t\t}\n\t\t//向右递归\n\t\tif(right > l) {\n\t\t\tquickSort(arr, l, right);\n\t\t}\n\t\t\n\t\t\n\t}\n")])])]),a("blockquote",[a("p",[t._v("算法分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度：O(nlogn)")]),t._v(" "),a("li",[t._v("空间复杂度：O(logn)")]),t._v(" "),a("li",[t._v("稳定性：不稳定")])]),t._v(" "),a("h2",{attrs:{id:"_7-10-归并排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-归并排序"}},[t._v("#")]),t._v(" 7.10 归并排序")]),t._v(" "),a("h3",{attrs:{id:"_7-10-1-归并排序介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-1-归并排序介绍"}},[t._v("#")]),t._v(" 7.10.1 归并排序介绍:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('   归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）\n策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案"修 \n补"在一起，即分而治之)。\n')])])]),a("h3",{attrs:{id:"_7-10-2-归并排序思想示意图-1-基本思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-2-归并排序思想示意图-1-基本思想"}},[t._v("#")]),t._v(" 7.10.2 归并排序思想示意图 1-基本思想:")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/20.jpg",alt:"归并排序基本思想"}})]),t._v(" "),a("h3",{attrs:{id:"_7-10-3-归并排序思想示意图-2-合并相邻有序子序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-3-归并排序思想示意图-2-合并相邻有序子序列"}},[t._v("#")]),t._v(" 7.10.3 归并排序思想示意图 2-合并相邻有序子序列:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("   再来看看治阶段，我们需要将两个已经有序的子序列合并成一个有序序列，比如上图中的最后一次合并，\n要将 [4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]，来看下实现步骤\n")])])]),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/21.jpg",alt:"实现步骤"}})]),t._v(" "),a("h3",{attrs:{id:"_7-10-4-归并排序的应用实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-4-归并排序的应用实例"}},[t._v("#")]),t._v(" 7.10.4 归并排序的应用实例:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("动图：\n")])])]),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif",alt:"归并排序动图"}}),t._v("\n（1）数组val arr = Array(8, 4, 5, 7, 1, 3, 6, 2 ), 请使用归并排序完成排序。\n（2）数组val arr = Array(8, 4, 5, 7, 1, 3, 6, 2 ), 请使用归并排序完成排序。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('代码1:\npublic static void mergeSort(int[] arr) {\n    sort(arr, 0, arr.length - 1);\n}\n\npublic static void sort(int[] arr, int L, int R) {\n    if(L == R) {\n        return;\n    }\n    int mid = L + ((R - L) >> 1);\n    sort(arr, L, mid);\n    sort(arr, mid + 1, R);\n    merge(arr, L, mid, R);\n}\n\npublic static void merge(int[] arr, int L, int mid, int R) {\n    int[] temp = new int[R - L + 1];\n    int i = 0;\n    int p1 = L;\n    int p2 = mid + 1;\n    // 比较左右两部分的元素，哪个小，把那个元素填入temp中\n    while(p1 <= mid && p2 <= R) {\n        temp[i++] = arr[p1] < arr[p2] ? arr[p1++] : arr[p2++];\n    }\n    // 上面的循环退出后，把剩余的元素依次填入到temp中\n    // 以下两个while只有一个会执行\n    while(p1 <= mid) {\n        temp[i++] = arr[p1++];\n    }\n    while(p2 <= R) {\n        temp[i++] = arr[p2++];\n    }\n    // 把最终的排序的结果复制给原数组\n    for(i = 0; i < temp.length; i++) {\n        arr[L + i] = temp[i];\n    }\n}\n\n代码2:\npublic class MergetSort {\n\n\tpublic static void main(String[] args) {\n\t\t//int arr[] = { 8, 4, 5, 7, 1, 3, 6, 2 }; //\n\t\t\n\t\t//测试快排的执行速度\n\t\t// 创建要给80000个的随机的数组\n\t\tint[] arr = new int[8000000];\n\t\tfor (int i = 0; i < 8000000; i++) {\n\t\t\tarr[i] = (int) (Math.random() * 8000000); // 生成一个[0, 8000000) 数\n\t\t}\n\t\tSystem.out.println("排序前");\n\t\tDate data1 = new Date();\n\t\tSimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n\t\tString date1Str = simpleDateFormat.format(data1);\n\t\tSystem.out.println("排序前的时间是=" + date1Str);\n\t\t\n\t\tint temp[] = new int[arr.length]; //归并排序需要一个额外空间\n \t\tmergeSort(arr, 0, arr.length - 1, temp);\n \t\t\n \t\tDate data2 = new Date();\n\t\tString date2Str = simpleDateFormat.format(data2);\n\t\tSystem.out.println("排序前的时间是=" + date2Str);\n \t\t\n \t\t//System.out.println("归并排序后=" + Arrays.toString(arr));\n\t}\n\t\n\t\n\t//分+合方法\n\tpublic static void mergeSort(int[] arr, int left, int right, int[] temp) {\n\t\tif(left < right) {\n\t\t\tint mid = (left + right) / 2; //中间索引\n\t\t\t//向左递归进行分解\n\t\t\tmergeSort(arr, left, mid, temp);\n\t\t\t//向右递归进行分解\n\t\t\tmergeSort(arr, mid + 1, right, temp);\n\t\t\t//合并\n\t\t\tmerge(arr, left, mid, right, temp);\n\t\t\t\n\t\t}\n\t}\n\t\n\t//合并的方法\n\t/**\n\t * \n\t * @param arr 排序的原始数组\n\t * @param left 左边有序序列的初始索引\n\t * @param mid 中间索引\n\t * @param right 右边索引\n\t * @param temp 做中转的数组\n\t */\n\tpublic static void merge(int[] arr, int left, int mid, int right, int[] temp) {\n\t\t\n\t\tint i = left; // 初始化i, 左边有序序列的初始索引\n\t\tint j = mid + 1; //初始化j, 右边有序序列的初始索引\n\t\tint t = 0; // 指向temp数组的当前索引\n\t\t\n\t\t//(一)\n\t\t//先把左右两边(有序)的数据按照规则填充到temp数组\n\t\t//直到左右两边的有序序列，有一边处理完毕为止\n\t\twhile (i <= mid && j <= right) {//继续\n\t\t\t//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素\n\t\t\t//即将左边的当前元素，填充到 temp数组 \n\t\t\t//然后 t++, i++\n\t\t\tif(arr[i] <= arr[j]) {\n\t\t\t\ttemp[t] = arr[i];\n\t\t\t\tt += 1;\n\t\t\t\ti += 1;\n\t\t\t} else { //反之,将右边有序序列的当前元素，填充到temp数组\n\t\t\t\ttemp[t] = arr[j];\n\t\t\t\tt += 1;\n\t\t\t\tj += 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//(二)\n\t\t//把有剩余数据的一边的数据依次全部填充到temp\n\t\twhile( i <= mid) { //左边的有序序列还有剩余的元素，就全部填充到temp\n\t\t\ttemp[t] = arr[i];\n\t\t\tt += 1;\n\t\t\ti += 1;\t\n\t\t}\n\t\t\n\t\twhile( j <= right) { //右边的有序序列还有剩余的元素，就全部填充到temp\n\t\t\ttemp[t] = arr[j];\n\t\t\tt += 1;\n\t\t\tj += 1;\t\n\t\t}\n\t\t\n\t\t\n\t\t//(三)\n\t\t//将temp数组的元素拷贝到arr\n\t\t//注意，并不是每次都拷贝所有\n\t\tt = 0;\n\t\tint tempLeft = left; // \n\t\t//第一次合并 tempLeft = 0 , right = 1 //  tempLeft = 2  right = 3 // tL=0 ri=3\n\t\t//最后一次 tempLeft = 0  right = 7\n\t\twhile(tempLeft <= right) { \n\t\t\tarr[tempLeft] = temp[t];\n\t\t\tt += 1;\n\t\t\ttempLeft += 1;\n\t\t}\n\t\t\n\t}\n}\n')])])]),a("blockquote",[a("p",[t._v("算法分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度：O(nlogn)")]),t._v(" "),a("li",[t._v("空间复杂度：O(n)")]),t._v(" "),a("li",[t._v("稳定性：稳定")])]),t._v(" "),a("h2",{attrs:{id:"_7-11-基数排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-基数排序"}},[t._v("#")]),t._v(" 7.11 基数排序")]),t._v(" "),a("h3",{attrs:{id:"_7-11-1-基数排序-桶排序-介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-1-基数排序-桶排序-介绍"}},[t._v("#")]),t._v(" 7.11.1 基数排序(桶排序)介绍:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 基数排序（radix  sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket  sort）或  \n\tbin  sort，顾 名思义，它是通过键值的各个位的值，将要排序的元素分配至某些“桶”中，达到排序的作用 \n2) 基数排序法是属于稳定性的排序，基数排序法的是效率高的稳定性排序法 \n3) 基数排序(Radix  Sort)是桶排序的扩展 \n4) 基数排序是  1887  年赫尔曼·何乐礼发明的。它是这样实现的：将整数按位数切割成不同的数字，然后按每个位数分别比较。 \n")])])]),a("h3",{attrs:{id:"_7-11-2-基数排序基本思想"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-2-基数排序基本思想"}},[t._v("#")]),t._v(" 7.11.2 基数排序基本思想")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。 \n这样从最低位排序一直到最高位排序完成以后,数列就变成一个有序序列。\n2) 这样说明，比较难理解，下面我们看一个图文解释，理解基数排序的步骤\n")])])]),a("h3",{attrs:{id:"_7-11-3-基数排序图文说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-3-基数排序图文说明"}},[t._v("#")]),t._v(" 7.11.3 基数排序图文说明")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("将数组 {53, 3, 542, 748, 14, 214} 使用基数排序, 进行升序排序\n")])])]),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/22.jpg",alt:"基数排序图文"}}),t._v(" "),a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/23.jpg",alt:"基数排序图文"}})]),t._v(" "),a("h3",{attrs:{id:"_7-11-4-基数排序代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-4-基数排序代码实现"}},[t._v("#")]),t._v(" 7.11.4 基数排序代码实现")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("动图：\n")])])]),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F.gif",alt:"基数排序动图"}}),t._v("\n要求：\n将数组 {53,  3,  542,  748,  14,  214} 使用基数排序,进行升序排序\n1) 思路分析：前面的图文已经讲明确\n2) 代码实现：看老师演示")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('代码：\npackage com.atguigu.sort;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Arrays;\nimport java.util.Date;\n\npublic class RadixSort {\n\n\tpublic static void main(String[] args) {\n\t\tint arr[] = { 53, 3, 542, 748, 14, 214};\n\t\t\n\t\t// 80000000 * 11 * 4 / 1024 / 1024 / 1024 =3.3G \n//\t\tint[] arr = new int[8000000];\n//\t\tfor (int i = 0; i < 8000000; i++) {\n//\t\t\tarr[i] = (int) (Math.random() * 8000000); // 生成一个[0, 8000000) 数\n//\t\t}\n\t\tSystem.out.println("排序前");\n\t\tDate data1 = new Date();\n\t\tSimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");\n\t\tString date1Str = simpleDateFormat.format(data1);\n\t\tSystem.out.println("排序前的时间是=" + date1Str);\n\t\t\n\t\tradixSort(arr);\n\t\t\n\t\tDate data2 = new Date();\n\t\tString date2Str = simpleDateFormat.format(data2);\n\t\tSystem.out.println("排序前的时间是=" + date2Str);\n\t\t\n\t\tSystem.out.println("基数排序后 " + Arrays.toString(arr));\n\t\t\n\t}\n\n\t//基数排序方法\n\tpublic static void radixSort(int[] arr) {\n\t\t\n\t\t//根据前面的推导过程，我们可以得到最终的基数排序代码\n\t\t\n\t\t//1. 得到数组中最大的数的位数\n\t\tint max = arr[0]; //假设第一数就是最大数\n\t\tfor(int i = 1; i < arr.length; i++) {\n\t\t\tif (arr[i] > max) {\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\t//得到最大数是几位数\n\t\tint maxLength = (max + "").length();\n\t\t\n\t\t\n\t\t//定义一个二维数组，表示10个桶, 每个桶就是一个一维数组\n\t\t//说明\n\t\t//1. 二维数组包含10个一维数组\n\t\t//2. 为了防止在放入数的时候，数据溢出，则每个一维数组(桶)，大小定为arr.length\n\t\t//3. 名明确，基数排序是使用空间换时间的经典算法\n\t\tint[][] bucket = new int[10][arr.length];\n\t\t\n\t\t//为了记录每个桶中，实际存放了多少个数据,我们定义一个一维数组来记录各个桶的每次放入的数据个数\n\t\t//可以这里理解\n\t\t//比如：bucketElementCounts[0] , 记录的就是  bucket[0] 桶的放入数据个数\n\t\tint[] bucketElementCounts = new int[10];\n\t\t\n\t\t\n\t\t//这里我们使用循环将代码处理\n\t\t\n\t\tfor(int i = 0 , n = 1; i < maxLength; i++, n *= 10) {\n\t\t\t//(针对每个元素的对应位进行排序处理)， 第一次是个位，第二次是十位，第三次是百位..\n\t\t\tfor(int j = 0; j < arr.length; j++) {\n\t\t\t\t//取出每个元素的对应位的值\n\t\t\t\tint digitOfElement = arr[j] / n % 10;\n\t\t\t\t//放入到对应的桶中\n\t\t\t\tbucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];\n\t\t\t\tbucketElementCounts[digitOfElement]++;\n\t\t\t}\n\t\t\t//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)\n\t\t\tint index = 0;\n\t\t\t//遍历每一桶，并将桶中是数据，放入到原数组\n\t\t\tfor(int k = 0; k < bucketElementCounts.length; k++) {\n\t\t\t\t//如果桶中，有数据，我们才放入到原数组\n\t\t\t\tif(bucketElementCounts[k] != 0) {\n\t\t\t\t\t//循环该桶即第k个桶(即第k个一维数组), 放入\n\t\t\t\t\tfor(int l = 0; l < bucketElementCounts[k]; l++) {\n\t\t\t\t\t\t//取出元素放入到arr\n\t\t\t\t\t\tarr[index++] = bucket[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//第i+1轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！\n\t\t\t\tbucketElementCounts[k] = 0;\n\t\t\t\t\n\t\t\t}\n\t\t\t//System.out.println("第"+(i+1)+"轮，对个位的排序处理 arr =" + Arrays.toString(arr));\n\t\t\t\n\t\t}\n\t\t\n\t\t/*\n\t\t\n\t\t//第1轮(针对每个元素的个位进行排序处理)\n\t\tfor(int j = 0; j < arr.length; j++) {\n\t\t\t//取出每个元素的个位的值\n\t\t\tint digitOfElement = arr[j] / 1 % 10;\n\t\t\t//放入到对应的桶中\n\t\t\tbucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];\n\t\t\tbucketElementCounts[digitOfElement]++;\n\t\t}\n\t\t//按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)\n\t\tint index = 0;\n\t\t//遍历每一桶，并将桶中是数据，放入到原数组\n\t\tfor(int k = 0; k < bucketElementCounts.length; k++) {\n\t\t\t//如果桶中，有数据，我们才放入到原数组\n\t\t\tif(bucketElementCounts[k] != 0) {\n\t\t\t\t//循环该桶即第k个桶(即第k个一维数组), 放入\n\t\t\t\tfor(int l = 0; l < bucketElementCounts[k]; l++) {\n\t\t\t\t\t//取出元素放入到arr\n\t\t\t\t\tarr[index++] = bucket[k][l];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//第l轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！\n\t\t\tbucketElementCounts[k] = 0;\n\t\t\t\n\t\t}\n\t\tSystem.out.println("第1轮，对个位的排序处理 arr =" + Arrays.toString(arr));\n\t\t\n\t\t\n\t\t//==========================================\n\t\t\n\t\t//第2轮(针对每个元素的十位进行排序处理)\n\t\tfor (int j = 0; j < arr.length; j++) {\n\t\t\t// 取出每个元素的十位的值\n\t\t\tint digitOfElement = arr[j] / 10  % 10; //748 / 10 => 74 % 10 => 4\n\t\t\t// 放入到对应的桶中\n\t\t\tbucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];\n\t\t\tbucketElementCounts[digitOfElement]++;\n\t\t}\n\t\t// 按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)\n\t\tindex = 0;\n\t\t// 遍历每一桶，并将桶中是数据，放入到原数组\n\t\tfor (int k = 0; k < bucketElementCounts.length; k++) {\n\t\t\t// 如果桶中，有数据，我们才放入到原数组\n\t\t\tif (bucketElementCounts[k] != 0) {\n\t\t\t\t// 循环该桶即第k个桶(即第k个一维数组), 放入\n\t\t\t\tfor (int l = 0; l < bucketElementCounts[k]; l++) {\n\t\t\t\t\t// 取出元素放入到arr\n\t\t\t\t\tarr[index++] = bucket[k][l];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//第2轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！\n\t\t\tbucketElementCounts[k] = 0;\n\t\t}\n\t\tSystem.out.println("第2轮，对个位的排序处理 arr =" + Arrays.toString(arr));\n\t\t\n\t\t\n\t\t//第3轮(针对每个元素的百位进行排序处理)\n\t\tfor (int j = 0; j < arr.length; j++) {\n\t\t\t// 取出每个元素的百位的值\n\t\t\tint digitOfElement = arr[j] / 100 % 10; // 748 / 100 => 7 % 10 = 7\n\t\t\t// 放入到对应的桶中\n\t\t\tbucket[digitOfElement][bucketElementCounts[digitOfElement]] = arr[j];\n\t\t\tbucketElementCounts[digitOfElement]++;\n\t\t}\n\t\t// 按照这个桶的顺序(一维数组的下标依次取出数据，放入原来数组)\n\t\tindex = 0;\n\t\t// 遍历每一桶，并将桶中是数据，放入到原数组\n\t\tfor (int k = 0; k < bucketElementCounts.length; k++) {\n\t\t\t// 如果桶中，有数据，我们才放入到原数组\n\t\t\tif (bucketElementCounts[k] != 0) {\n\t\t\t\t// 循环该桶即第k个桶(即第k个一维数组), 放入\n\t\t\t\tfor (int l = 0; l < bucketElementCounts[k]; l++) {\n\t\t\t\t\t// 取出元素放入到arr\n\t\t\t\t\tarr[index++] = bucket[k][l];\n\t\t\t\t}\n\t\t\t}\n\t\t\t//第3轮处理后，需要将每个 bucketElementCounts[k] = 0 ！！！！\n\t\t\tbucketElementCounts[k] = 0;\n\t\t}\n\t\tSystem.out.println("第3轮，对个位的排序处理 arr =" + Arrays.toString(arr)); */\n\t\t\n\t}\n}\n')])])]),a("blockquote",[a("p",[t._v("算法分析")])]),t._v(" "),a("ul",[a("li",[t._v("时间复杂度：O(n * k)")]),t._v(" "),a("li",[t._v("空间复杂度：O(n + k)")]),t._v(" "),a("li",[t._v("稳定性：稳定")])]),t._v(" "),a("h3",{attrs:{id:"_7-11-5-基数排序的说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-5-基数排序的说明"}},[t._v("#")]),t._v(" 7.11.5 基数排序的说明:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 基数排序是对传统桶排序的扩展，速度很快. \n2) 基数排序是经典的空间换时间的方式，占用内存很大, 当对海量数据排序时，容易造成 OutOfMemoryError。 \n3) 基数排序时稳定的。[注:假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些 \n\t记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且  r[i]在  r[j]之前，而在排序后的序列中，\n\tr[i]仍在  r[j]之前， 则称这种排序算法是稳定的；否则称为不稳定的] \n4) 有负数的数组，我们不用基数排序来进行排序,    如果要支持负数，参考:  https://code.i-harness.com/zh-CN/q/e98fa9 \n")])])]),a("h2",{attrs:{id:"_7-12-常用排序算法总结和对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-12-常用排序算法总结和对比"}},[t._v("#")]),t._v(" 7.12 常用排序算法总结和对比")]),t._v(" "),a("h3",{attrs:{id:"_7-12-1-一张排序算法的比较图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-12-1-一张排序算法的比较图"}},[t._v("#")]),t._v(" 7.12.1 一张排序算法的比较图")]),t._v(" "),a("p",[a("img",{attrs:{src:"/java/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E7%AC%AC%E4%B8%83%E7%AB%A0_files/24.jpg",alt:"算法比较图"}})]),t._v(" "),a("h3",{attrs:{id:"_7-12-2-相关术语解释："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-12-2-相关术语解释："}},[t._v("#")]),t._v(" 7.12.2 相关术语解释：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("1) 稳定：如果  a 原本在  b  前面，而  a=b，排序之后  a 仍然在  b  的前面； \n2) 不稳定：如果  a 原本在  b  的前面，而  a=b，排序之后  a 可能会出现在  b  的后面； \n3) 内排序：所有排序操作都在内存中完成； \n4) 外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；\n5) 时间复杂度：  一个算法执行所耗费的时间。 \n6) 空间复杂度：运行完一个程序所需内存的大小。\n7) n: 数据规模 \n8) k: “桶”的个数 \n9) In-place: 不占用额外内存 \n10) Out-place:   占用额外内存\n")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);