(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{354:function(V,n,t){"use strict";t.r(n);var M=t(33),e=Object(M.a)({},(function(){var V=this.$createElement,n=this._self._c||V;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("p",[this._v("Vue介绍\n###一、基本介绍\n1、Vue.js目前最火的的一个前端框架，三大主流前端框架之一。\n2、Vue.js是一套构建用户界面的框架（一套完整的解决方案，对项目侵入性大，中途需要跟换框架则需要重构整个项目），只关注视图层，易上手，有配套的第三方类库。\n3、提高开发效率，帮助减少不必要的dom操作；双向数据绑定，通过框架提供的指令，前端只需要关注业务逻辑，不再关心dom如何渲染。\n###二、前端的MVVM\n1、前端视图层的概念，主要把每个页面分成了M（Model）、V（View）、VM（VM ViewModel）。VM是其中核心，M和V间的调度者。\n2、M，保存的是每个页面中单独的数据（比如要渲染页面表格，ajax请求到后台的你个数组，此数据即为M）。\n3、V，每个页面的html结构。\n4、VM，一个调度者，分割了M和V，M和V不直接关联，通过中间的VM。V想要保存数据到M，都要有VM做中间处理；V想要渲染页面，需要调用VM，VM从M中取数据。\n5、前端中使用MVVM思想，主要让开发更方便，MVVM提供了数据的双向绑定（由VM提供）。")])])}),[],!1,null,null,null);n.default=e.exports}}]);