(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{335:function(t,n,e){"use strict";e.r(n);var s=e(33),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_08-jsp-mvc-el-jstl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_08-jsp-mvc-el-jstl"}},[t._v("#")]),t._v(" 08 JSP MVC EL JSTL")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("1. JSP:\n\t1. 指令\n\t2. 注释\n\t3. 内置对象\n\n2. MVC开发模式\n3. EL表达式\n4. JSTL标签\n5. 三层架构\n")])])]),e("h2",{attrs:{id:"jsp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsp"}},[t._v("#")]),t._v(" JSP:")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('1. 指令\n\t* 作用：用于配置JSP页面，导入资源文件\n\t* 格式：\n\t\t<%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %>\n\t* 分类：\n\t\t1. page\t\t： 配置JSP页面的\n\t\t\t* contentType：等同于response.setContentType()\n\t\t\t\t1. 设置响应体的mime类型以及字符集\n\t\t\t\t2. 设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）\n\t\t\t* import：导包\n\t\t\t* errorPage：当前页面发生异常后，会自动跳转到指定的错误页面\n\t\t\t* isErrorPage：标识当前也是是否是错误页面。\n\t\t\t\t* true：是，可以使用内置对象exception\n\t\t\t\t* false：否。默认值。不可以使用内置对象exception\n\n\n\t\t2. include\t： 页面包含的。导入页面的资源文件\n\t\t\t* <%@include file="top.jsp"%>\n\t\t3. taglib\t： 导入资源\n\t\t\t* <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>\n\t\t\t\t* prefix：前缀，自定义的\n2. 注释:\n\t1. html注释：\n\t\t\x3c!-- --\x3e:只能注释html代码片段\n\t2. jsp注释：推荐使用\n\t\t<%-- --%>：可以注释所有\n\n\n3. 内置对象\n\t* 在jsp页面中不需要创建，直接使用的对象\n\t* 一共有9个：\n\t\t\t变量名\t\t\t\t\t真实类型\t\t\t\t\t\t作用\n\t\t* pageContext\t\t\t\tPageContext\t\t\t\t\t当前页面共享数据，还可以获取其他八个内置对象\n\t\t* request\t\t\t\t\tHttpServletRequest\t\t\t一次请求访问的多个资源(转发)\n\t\t* session\t\t\t\t\tHttpSession\t\t\t\t\t一次会话的多个请求间\n\t\t* application\t\t\t\tServletContext\t\t\t\t所有用户间共享数据\n\t\t* response\t\t\t\t\tHttpServletResponse\t\t\t响应对象\n\t\t* page\t\t\t\t\t\tObject\t\t\t\t\t\t当前页面(Servlet)的对象  this\n\t\t* out\t\t\t\t\t\tJspWriter\t\t\t\t\t输出对象，数据输出到页面上\n\t\t* config\t\t\t\t\tServletConfig\t\t\t\tServlet的配置对象\n\t\t* exception\t\t\t\t\tThrowable\t\t\t\t\t异常对象\n')])])]),e("h2",{attrs:{id:"mvc：开发模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mvc：开发模式"}},[t._v("#")]),t._v(" MVC：开发模式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("1. jsp演变历史\n\t1. 早期只有servlet，只能使用response输出标签数据，非常麻烦\n\t2. 后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作\n\t3. 再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性\n\n2. MVC：\n\t1. M：Model，模型。JavaBean\n\t\t* 完成具体的业务操作，如：查询数据库，封装对象\n\t2. V：View，视图。JSP\n\t\t* 展示数据\n\t3. C：Controller，控制器。Servlet\n\t\t* 获取用户的输入\n\t\t* 调用模型\n\t\t* 将数据交给视图进行展示\n")])])]),e("p",[e("img",{attrs:{src:"/java/javaweb/EL&JSTL%E7%AC%94%E8%AE%B0_files/1.jpg",alt:"MVC设计模式"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t* 优缺点：\n\t\t1. 优点：\n\t\t\t1. 耦合性低，方便维护，可以利于分工协作\n\t\t\t2. 重用性高\n\n\t\t2. 缺点：\n\t\t\t1. 使得项目架构变得复杂，对开发人员要求高\n")])])]),e("h2",{attrs:{id:"el表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#el表达式"}},[t._v("#")]),t._v(" EL表达式")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('1. 概念：Expression Language 表达式语言\n2. 作用：替换和简化jsp页面中java代码的编写\n3. 语法：${表达式}\n4. 注意：\n\t* jsp默认支持el表达式的。如果要忽略el表达式\n\t\t1. 设置jsp中page指令中：isELIgnored="true" 忽略当前jsp页面中所有的el表达式\n\t\t2. \\${表达式} ：忽略当前这个el表达式\n\n\n5. 使用：\n\t1. 运算：\n\t\t* 运算符：\n\t\t\t1. 算数运算符： + - * /(div) %(mod)\n\t\t\t2. 比较运算符： > < >= <= == !=\n\t\t\t3. 逻辑运算符： &&(and) ||(or) !(not)\n\t\t\t4. 空运算符： empty\n\t\t\t\t* 功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0\n\t\t\t\t* ${empty list}:判断字符串、集合、数组对象是否为null或者长度为0\n\t\t\t\t* ${not empty str}:表示判断字符串、集合、数组对象是否不为null 并且 长度>0\n\t2. 获取值\n\t\t1. el表达式只能从域对象中获取值\n\t\t2. 语法：\n\t\t\t1. ${域名称.键名}：从指定域中获取指定键的值\n\t\t\t\t* 域名称：\n\t\t\t\t\t1. pageScope\t\t--\x3e pageContext\n\t\t\t\t\t2. requestScope \t--\x3e request\n\t\t\t\t\t3. sessionScope \t--\x3e session\n\t\t\t\t\t4. applicationScope --\x3e application（ServletContext）\n\t\t\t\t* 举例：在request域中存储了name=张三\n\t\t\t\t* 获取：${requestScope.name}\n\n\t\t\t2. ${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。\n\n\t\t\t\n\t\t\t\n\t\t\t3. 获取对象、List集合、Map集合的值\n\t\t\t\t1. 对象：${域名称.键名.属性名}\n\t\t\t\t\t* 本质上会去调用对象的getter方法\n\n\t\t\t\t2. List集合：${域名称.键名[索引]}\n\n\t\t\t\t3. Map集合：\n\t\t\t\t\t* ${域名称.键名.key名称}\n\t\t\t\t\t* ${域名称.键名["key名称"]}\n\n\n\t3. 隐式对象：\n\t\t* el表达式中有11个隐式对象\n\t\t* pageContext：\n\t\t\t* 获取jsp其他八个内置对象\n\t\t\t\t* ${pageContext.request.contextPath}：动态获取虚拟目录\n')])])]),e("h2",{attrs:{id:"jstl"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jstl"}},[t._v("#")]),t._v(" JSTL")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('1. 概念：JavaServer Pages Tag Library  JSP标准标签库\n\t* 是由Apache组织提供的开源的免费的jsp标签\t\t<标签>\n\n2. 作用：用于简化和替换jsp页面上的java代码\t\t\n\n3. 使用步骤：\n\t1. 导入jstl相关jar包\n\t2. 引入标签库：taglib指令：  <%@ taglib %>\n\t3. 使用标签\n\n4. 常用的JSTL标签\n\t1. if:相当于java代码的if语句\n\t\t1. 属性：\n            * test 必须属性，接受boolean表达式\n                * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容\n                * 一般情况下，test属性值会结合el表达式一起使用\n   \t\t 2. 注意：\n       \t\t * c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签\n\t\t\t \n\t\t3.代码\n\t\t<pre>\n\t\t<%--\n\t\t\n\t\tc:if标签\n\t\t    1. 属性：\n\t\t        * test 必须属性，接受boolean表达式\n\t\t            * 如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容\n\t\t            * 一般情况下，test属性值会结合el表达式一起使用\n\t\t\n\t\t    2. 注意：c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签\n\t\t\n\t\t\n\t\t--%>\n\t\t\n\t\t<c:if test="true">\n\t\t    <h1>我是真...</h1>\n\t\t</c:if>\n\t\t<br>\n\t\t\n\t\t<%\n\t\t    //判断request域中的一个list集合是否为空，如果不为null则显示遍历集合\n\t\t\n\t\t    List list = new ArrayList();\n\t\t    list.add("aaaa");\n\t\t    request.setAttribute("list",list);\n\t\t\n\t\t    request.setAttribute("number",4);\n\t\t\n\t\t%>\n\t\t\n\t\t<c:if test="${not empty list}">\n\t\t    遍历集合...\n\t\t\n\t\t</c:if>\n\t\t<br>\n\t\t\n\t\t<c:if test="${number % 2 != 0}">\n\t\t\n\t\t        ${number}为奇数\n\t\t\n\t\t</c:if>\n\t\t\n\t\t<c:if test="${number % 2 == 0}">\n\t\t\n\t\t    ${number}为偶数\n\t\t\n\t\t</c:if>\n\t\t</pre>\n\t2. choose:相当于java代码的switch语句\n\t\t1. 使用choose标签声明         \t\t\t相当于switch声明\n        2. 使用when标签做判断         \t\t\t相当于case\n        3. 使用otherwise标签做其他情况的声明    \t相当于default\n\t\t4.代码\n\t\t<pre>\n\t\t<%--\n\t\t    完成数字编号对应星期几案例\n\t\t        1.域中存储一数字\n\t\t        2.使用choose标签取出数字         相当于switch声明\n\t\t        3.使用when标签做数字判断         相当于case\n\t\t        4.otherwise标签做其他情况的声明  相当于default\n\t\t--%>\n\t\t\n\t\t<%\n\t\t    request.setAttribute("number",51);\n\t\t%>\n\t\t\n\t\t<c:choose>\n\t\t    <c:when test="${number == 1}">星期一</c:when>\n\t\t    <c:when test="${number == 2}">星期二</c:when>\n\t\t    <c:when test="${number == 3}">星期三</c:when>\n\t\t    <c:when test="${number == 4}">星期四</c:when>\n\t\t    <c:when test="${number == 5}">星期五</c:when>\n\t\t    <c:when test="${number == 6}">星期六</c:when>\n\t\t    <c:when test="${number == 7}">星期天</c:when>\n\t\t\n\t\t    <c:otherwise>数字输入有误</c:otherwise>\n\t\t</c:choose>\n\t\t</pre>\n\t3. foreach:相当于java代码的for语句\n\t代码：\n\t<pre>\n\t\n\t<%--\n\t\n\t    foreach:相当于java代码的for语句\n\t        1. 完成重复的操作\n\t            for(int i = 0; i < 10; i ++){\n\t\n\t            }\n\t            * 属性：\n\t                begin：开始值\n\t                end：结束值\n\t                var：临时变量\n\t                step：步长\n\t                varStatus:循环状态对象\n\t                    index:容器中元素的索引，从0开始\n\t                    count:循环次数，从1开始\n\t        2. 遍历容器\n\t            List<User> list;\n\t            for(User user : list){\n\t\n\t            }\n\t\n\t            * 属性：\n\t                items:容器对象\n\t                var:容器中元素的临时变量\n\t                varStatus:循环状态对象\n\t                    index:容器中元素的索引，从0开始\n\t                    count:循环次数，从1开始\n\t\n\t\n\t--%>\n\t\n\t<c:forEach begin="1" end="10" var="i" step="2" varStatus="s">\n\t    ${i} <h3>${s.index}<h3> <h4> ${s.count} </h4><br>\n\t\n\t</c:forEach>\n\t\n\t    <hr>\n\t\n\t\n\t    <%\n\t        List list = new ArrayList();\n\t        list.add("aaa");\n\t        list.add("bbb");\n\t        list.add("ccc");\n\t\n\t        request.setAttribute("list",list);\n\t\n\t\n\t    %>\n\t\n\t    <c:forEach items="${list}" var="str" varStatus="s">\n\t\n\t            ${s.index} ${s.count} ${str}<br>\n\t\n\t    </c:forEach>\n\t\n\t</pre>\n\n5. 练习：\n\t* 需求：在request域中有一个存有User对象的List集合。需要使用jstl+el将list集合数据展示到jsp页面的表格table中\n')])])]),e("h2",{attrs:{id:"三层架构：软件设计架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三层架构：软件设计架构"}},[t._v("#")]),t._v(" 三层架构：软件设计架构")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("1. 界面层(表示层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互\n2. 业务逻辑层：处理业务逻辑的。\n3. 数据访问层：操作数据存储文件。\n")])])]),e("h2",{attrs:{id:"案例：用户信息列表展示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#案例：用户信息列表展示"}},[t._v("#")]),t._v(" 案例：用户信息列表展示")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("1. 需求：用户信息的增删改查操作\n2. 设计：\n\t1. 技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat\n\t2. 数据库设计：\n\t\tcreate database day17; -- 创建数据库\n\t\tuse day17; \t\t\t   -- 使用数据库\n\t\tcreate table user(   -- 创建表\n\t\t\tid int primary key auto_increment,\n\t\t\tname varchar(20) not null,\n\t\t\tgender varchar(5),\n\t\t\tage int,\n\t\t\taddress varchar(32),\n\t\t\tqq\tvarchar(20),\n\t\t\temail varchar(50)\n\t\t);\n\n3. 开发：\n\t1. 环境搭建\n\t\t1. 创建数据库环境\n\t\t2. 创建项目，导入需要的jar包\n\n\t2. 编码\n\n\n4. 测试\n5. 部署运维\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);