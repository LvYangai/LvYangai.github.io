(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{326:function(t,e,n){"use strict";n.r(e);var s=n(33),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"_07-cookie-session"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_07-cookie-session"}},[t._v("#")]),t._v(" 07.Cookie&Session")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1. 会话技术\n\t1. Cookie\n\t2. Session\n2. JSP：入门学习\n")])])]),n("h2",{attrs:{id:"会话技术"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#会话技术"}},[t._v("#")]),t._v(" 会话技术")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1. 会话：一次会话中包含多次请求和响应。\n\t* 一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止\n2. 功能：在一次会话的范围内的多次请求间，共享数据\n3. 方式：\n\t1. 客户端会话技术：Cookie\n\t2. 服务器端会话技术：Session\n")])])]),n("h2",{attrs:{id:"cookie："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cookie："}},[t._v("#")]),t._v(" Cookie：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1. 概念：客户端会话技术，将数据保存到客户端\n")])])]),n("p",[n("img",{attrs:{src:"/java/javaweb/Cookie&Session%E7%AC%94%E8%AE%B0_files/1.jpg",alt:"Cookie原理"}})]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('2. 快速入门：\n\t* 使用步骤：\n\t\t1. 创建Cookie对象，绑定数据\n\t\t\t* new Cookie(String name, String value) \n\t\t2. 发送Cookie对象\n\t\t\t* response.addCookie(Cookie cookie) \n\t\t3. 获取Cookie，拿到数据\n\t\t\t* Cookie[]  request.getCookies()  \n\n\n3. 实现原理\n\t* 基于响应头set-cookie和请求头cookie实现\n\n4. cookie的细节\n\t1. 一次可不可以发送多个cookie?\n\t\t* 可以\n\t\t* 可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。\n\t2. cookie在浏览器中保存多长时间？\n\t\t1. 默认情况下，当浏览器关闭后，Cookie数据被销毁\n\t\t2. 持久化存储：\n\t\t\t* setMaxAge(int seconds)\n\t\t\t\t1. 正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效\n\t\t\t\t2. 负数：默认值\n\t\t\t\t3. 零：删除cookie信息\n\t3. cookie能不能存中文？\n\t\t* 在tomcat 8 之前 cookie中不能直接存储中文数据。\n\t\t\t* 需要将中文数据转码---一般采用URL编码(%E3)\n\t\t* 在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析\n\t4. cookie共享问题？\n\t\t1. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？\n\t\t\t* 默认情况下cookie不能共享\n\n\t\t\t* setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录\n\t\t\t\t* 如果要共享，则可以将path设置为"/"\n\n\t\t\n\t\t2. 不同的tomcat服务器间cookie共享问题？\n\t\t\t* setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享\n\t\t\t\t* setDomain(".baidu.com"),那么tieba.baidu.com和news.baidu.com中cookie可以共享\n\t\t\n\n5. Cookie的特点和作用\n\t1. cookie存储数据在客户端浏览器\n\t2. 浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)\n\n\t* 作用：\n\t\t1. cookie一般用于存出少量的不太敏感的数据\n\t\t2. 在不登录的情况下，完成服务器对客户端的身份识别\n\n6. 案例：记住上一次访问时间\n\t1. 需求：\n\t\t1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。\n\t\t2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串\n\n\t2. 分析：\n')])])]),n("p",[n("img",{attrs:{src:"/java/javaweb/Cookie&Session%E7%AC%94%E8%AE%B0_files/2.jpg",alt:"Cookie_记住上次访问时间 "}}),t._v("\n1. 可以采用Cookie来完成\n2. 在服务器中的Servlet判断是否有一个名为lastTime的cookie\n1. 有：不是第一次访问\n1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20\n2. 写回Cookie：lastTime=2018年6月10日11:50:01\n2. 没有：是第一次访问\n1. 响应数据：您好，欢迎您首次访问\n2. 写回Cookie：lastTime=2018年6月10日11:50:01")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('\t3. 代码实现：\n\n@WebServlet("/cookieTest")\npublic class CookieTest extends HttpServlet {\n\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t//设置响应的消息体的数据格式以及编码\n\t\tresponse.setContentType("text/html;charset=utf-8");\n\n\t\t//1.获取所有Cookie\n\t\tCookie[] cookies = request.getCookies();\n\t\tboolean flag = false;//没有cookie为lastTime\n\t\t//2.遍历cookie数组\n\t\tif(cookies != null && cookies.length > 0){\n\t\t\tfor (Cookie cookie : cookies) {\n\t\t\t\t//3.获取cookie的名称\n\t\t\t\tString name = cookie.getName();\n\t\t\t\t//4.判断名称是否是：lastTime\n\t\t\t\tif("lastTime".equals(name)){\n\t\t\t\t\t//有该Cookie，不是第一次访问\n\n\t\t\t\t\tflag = true;//有lastTime的cookie\n\n\t\t\t\t\t//设置Cookie的value\n\t\t\t\t\t//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie\n\t\t\t\t\tDate date  = new Date();\n\t\t\t\t\tSimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");\n\t\t\t\t\tString str_date = sdf.format(date);\n\t\t\t\t\tSystem.out.println("编码前："+str_date);\n\t\t\t\t\t//URL编码\n\t\t\t\t\tstr_date = URLEncoder.encode(str_date,"utf-8");\n\t\t\t\t\tSystem.out.println("编码后："+str_date);\n\t\t\t\t\tcookie.setValue(str_date);\n\t\t\t\t\t//设置cookie的存活时间\n\t\t\t\t\tcookie.setMaxAge(60 * 60 * 24 * 30);//一个月\n\t\t\t\t\tresponse.addCookie(cookie);\n\n\n\t\t\t\t\t//响应数据\n\t\t\t\t\t//获取Cookie的value，时间\n\t\t\t\t\tString value = cookie.getValue();\n\t\t\t\t\tSystem.out.println("解码前："+value);\n\t\t\t\t\t//URL解码：\n\t\t\t\t\tvalue = URLDecoder.decode(value,"utf-8");\n\t\t\t\t\tSystem.out.println("解码后："+value);\n\t\t\t\t\tresponse.getWriter().write("<h1>欢迎回来，您上次访问时间为:"+value+"</h1>");\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tif(cookies == null || cookies.length == 0 || flag == false){\n\t\t\t//没有，第一次访问\n\n\t\t\t//设置Cookie的value\n\t\t\t//获取当前时间的字符串，重新设置Cookie的值，重新发送cookie\n\t\t\tDate date  = new Date();\n\t\t\tSimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日 HH:mm:ss");\n\t\t\tString str_date = sdf.format(date);\n\t\t\tSystem.out.println("编码前："+str_date);\n\t\t\t//URL编码\n\t\t\tstr_date = URLEncoder.encode(str_date,"utf-8");\n\t\t\tSystem.out.println("编码后："+str_date);\n\n\t\t\tCookie cookie = new Cookie("lastTime",str_date);\n\t\t\t//设置cookie的存活时间\n\t\t\tcookie.setMaxAge(60 * 60 * 24 * 30);//一个月\n\t\t\tresponse.addCookie(cookie);\n\n\t\t\tresponse.getWriter().write("<h1>您好，欢迎您首次访问</h1>");\n\t\t}\n\n\n\t}\n\n\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\tthis.doPost(request, response);\n\t}\n}\n')])])]),n("h2",{attrs:{id:"jsp：入门学习"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsp：入门学习"}},[t._v("#")]),t._v(" JSP：入门学习")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1. 概念：\n\t* Java Server Pages： java服务器端页面\n\t\t* 可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码\n\t\t* 用于简化书写！！！\n\n\n2. 原理\n")])])]),n("p",[n("img",{attrs:{src:"/java/javaweb/Cookie&Session%E7%AC%94%E8%AE%B0_files/3.jpg",alt:"JSP原理"}}),t._v("\n* JSP本质上就是一个Servlet")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("3. JSP的脚本：JSP定义Java代码的方式\n\t1. <%  代码 %>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。\n\t2. <%! 代码 %>：定义的java代码，在jsp转换后的java类的成员位置。\n\t3. <%= 代码 %>：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。\n\n\n4. JSP的内置对象：\n\t* 在jsp页面中不需要获取和创建，可以直接使用的对象\n\t* jsp一共有9个内置对象。\n\t* 今天学习3个：\n\t\t* request\n\t\t* response\n\t\t* out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似\n\t\t\t* response.getWriter()和out.write()的区别：\n\t\t\t\t* 在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。\n\t\t\t\t* response.getWriter()数据输出永远在out.write()之前\n\t\t\t\n5. 案例:改造Cookie案例\n")])])]),n("h2",{attrs:{id:"session：主菜"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#session：主菜"}},[t._v("#")]),t._v(" Session：主菜")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1. 概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession\n2. 快速入门：\n\t1. 获取HttpSession对象：\n\t\tHttpSession session = request.getSession();\n\t2. 使用HttpSession对象：\n\t\tObject getAttribute(String name)  \n\t\tvoid setAttribute(String name, Object value)\n\t\tvoid removeAttribute(String name)  \n\n3. 原理\n\t* Session的实现是依赖于Cookie的。\n")])])]),n("p",[n("img",{attrs:{src:"/java/javaweb/Cookie&Session%E7%AC%94%E8%AE%B0_files/4.jpg",alt:"Session原理"}})]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('4. 细节：\n\t1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？\n\t\t* 默认情况下。不是。\n\t\t* 如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。\n\t\t\t Cookie c = new Cookie("JSESSIONID",session.getId());\n\t         c.setMaxAge(60*60);\n\t         response.addCookie(c);\n\n\t2. 客户端不关闭，服务器关闭后，两次获取的session是同一个吗？\n\t\t* 不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作\n\t\t\t* session的钝化：\n\t\t\t\t* 在服务器正常关闭之前，将session对象系列化到硬盘上\n\t\t\t* session的活化：\n\t\t\t\t* 在服务器启动后，将session文件转化为内存中的session对象即可。\n\t\t\t\n\t3. session什么时候被销毁？\n\t\t1. 服务器关闭\n\t\t2. session对象调用invalidate() 。\n\t\t3. session默认失效时间 30分钟\n\t\t\t选择性配置修改\t\n\t\t\t<session-config>\n\t\t        <session-timeout>30</session-timeout>\n\t\t    </session-config>\n\n 5. session的特点\n\t 1. session用于存储一次会话的多次请求的数据，存在服务器端\n\t 2. session可以存储任意类型，任意大小的数据\n\n\t* session与Cookie的区别：\n\t\t1. session存储数据在服务器端，Cookie在客户端\n\t\t2. session没有数据大小限制，Cookie有\n\t\t3. session数据安全，Cookie相对于不安全\n')])])]),n("h2",{attrs:{id:"案例：验证码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#案例：验证码"}},[t._v("#")]),t._v(" 案例：验证码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1. 案例需求：\n\t1. 访问带有验证码的登录页面login.jsp\n\t2. 用户输入用户名，密码以及验证码。\n\t\t* 如果用户名和密码输入有误，跳转登录页面，提示:用户名或密码错误\n\t\t* 如果验证码输入有误，跳转登录页面，提示：验证码错误\n\t\t* 如果全部输入正确，则跳转到主页success.jsp，显示：用户名,欢迎您\n\n\n2. 分析：\n")])])]),n("p",[n("img",{attrs:{src:"/java/javaweb/Cookie&Session%E7%AC%94%E8%AE%B0_files/5.jpg",alt:"登录案例分析"}}),t._v('\n3.代码\n@WebServlet("/loginServlet")\npublic class LoginServlet extends HttpServlet {\nprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\nresponse.setCharacterEncoding("utf-8");\n//获取参数')]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('        String username = request.getParameter("username");\n        String password = request.getParameter("password");\n        String checkCode = request.getParameter("checkCode");\n        HttpSession session = request.getSession();\n        String checkCode_session = (String) session.getAttribute("checkCode_session");\n        session.removeAttribute("checkCode_session");\n        if (checkCode_session!=null && checkCode_session.equalsIgnoreCase(checkCode)) {\n            //忽略大小写 判断用户密码是否一致\n            if ("zhangsan".equals(username) && "123456".equals(password)){\n                //登录成功\n                session.setAttribute("username",username);\n                response.sendRedirect(request.getContextPath()+"/success.jsp");\n            }else {\n                //登录失败\n                request.setAttribute("login_error","用户名或密码错误");\n                request.getRequestDispatcher("/login.jsp").forward(request,response);\n            }\n        }else {\n            //验证码不一致\n            //存储信息到request\n            request.setAttribute("cc_error","验证码错误");\n            //转发\n            request.getRequestDispatcher("/login.jsp").forward(request,response);\n        }\n    }\n')])])])])}),[],!1,null,null,null);e.default=o.exports}}]);