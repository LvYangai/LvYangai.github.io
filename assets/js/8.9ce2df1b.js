(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{325:function(t,e,n){"use strict";n.r(e);var r=n(33),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"filter-listener"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filter-listener"}},[t._v("#")]),t._v(" Filter&Listener")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("1. Filter：过滤器\n2. Listener：监听器\n")])])]),n("h2",{attrs:{id:"filter：过滤器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filter：过滤器"}},[t._v("#")]),t._v(" Filter：过滤器")]),t._v(" "),n("p",[n("img",{attrs:{src:"/java/javaweb/Filter&Listener%E7%AC%94%E8%AE%B0_files/1.jpg",alt:"Filter过滤器"}})]),t._v(" "),n("h3",{attrs:{id:"_1-概念："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念："}},[t._v("#")]),t._v(" 1. 概念：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("\t* 生活中的过滤器：净水器,空气净化器，土匪、\n\t* web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。\n\t* 过滤器的作用：\n\t\t* 一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...\n")])])]),n("h3",{attrs:{id:"_2-快速入门："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-快速入门："}},[t._v("#")]),t._v(" 2. 快速入门：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('\t1. 步骤：\n\t\t1. 定义一个类，实现接口Filter\n\t\t2. 复写方法\n\t\t3. 配置拦截路径\n\t\t\t1. web.xml\n\t\t\t2. 注解\n\t2. 代码：\n\t\t@WebFilter("/*")//访问所有资源之前，都会执行该过滤器\n\t\tpublic class FilterDemo1 implements Filter {\n\t\t    @Override\n\t\t    public void init(FilterConfig filterConfig) throws ServletException {\n\t\t\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {\n\t\t        System.out.println("filterDemo1被执行了....");\n\t\t\n\t\t\n\t\t        //放行\n\t\t        filterChain.doFilter(servletRequest,servletResponse);\n\t\t\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void destroy() {\n\t\t\n\t\t    }\n\t\t}\n')])])]),n("h3",{attrs:{id:"_3-过滤器细节："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-过滤器细节："}},[t._v("#")]),t._v(" 3. 过滤器细节：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("\t1. web.xml配置\t\n\t\t<filter>\n\t        <filter-name>demo1</filter-name>\n\t        <filter-class>cn.itcast.web.filter.FilterDemo1</filter-class>\n\t    </filter>\n\t    <filter-mapping>\n\t        <filter-name>demo1</filter-name>\n\t\t\t\x3c!-- 拦截路径 --\x3e\n\t        <url-pattern>/*</url-pattern>\n\t    </filter-mapping>\n\t2. 过滤器执行流程\n\t\t1. 执行过滤器\n\t\t2. 执行放行后的资源\n\t\t3. 回来执行过滤器放行代码下边的代码\n\t3. 过滤器生命周期方法\n\t\t1. init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源\n\t\t2. doFilter:每一次请求被拦截资源时，会执行。执行多次\n\t\t3. destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源\n")])])]),n("h3",{attrs:{id:"_4-过滤器配置详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-过滤器配置详解"}},[t._v("#")]),t._v(" 4. 过滤器配置详解")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("\t\t* 拦截路径配置：\n\t\t\t1. 具体资源路径： /index.jsp   只有访问index.jsp资源时，过滤器才会被执行\n\t\t\t2. 拦截目录： /user/*\t访问/user下的所有资源时，过滤器都会被执行\n\t\t\t3. 后缀名拦截： *.jsp\t\t访问所有后缀名为jsp资源时，过滤器都会被执行\n\t\t\t4. 拦截所有资源：/*\t\t访问所有资源时，过滤器都会被执行\n\t\t* 拦截方式配置：资源被访问的方式\n\t\t\t* 注解配置：\n\t\t\t\t* 设置dispatcherTypes属性\n\t\t\t\t\t1. REQUEST：默认值。浏览器直接请求资源\n\t\t\t\t\t2. FORWARD：转发访问资源\n\t\t\t\t\t3. INCLUDE：包含访问资源\n\t\t\t\t\t4. ERROR：错误跳转资源\n\t\t\t\t\t5. ASYNC：异步访问资源\n\t\t\t* web.xml配置\n\t\t\t\t* 设置<dispatcher></dispatcher>标签即可\n\t\t\t\n\t5. 过滤器链(配置多个过滤器)\n\t\t* 执行顺序：如果有两个过滤器：过滤器1和过滤器2\n\t\t\t1. 过滤器1\n\t\t\t2. 过滤器2\n\t\t\t3. 资源执行\n\t\t\t4. 过滤器2\n\t\t\t5. 过滤器1 \n\n\t\t* 过滤器先后顺序问题：\n\t\t\t1. 注解配置：按照类名的字符串比较规则比较，值小的先执行\n\t\t\t\t* 如： AFilter 和 BFilter，AFilter就先执行了。\n\t\t\t2. web.xml配置： <filter-mapping>谁定义在上边，谁先执行\n")])])]),n("h3",{attrs:{id:"_4-案例："}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-案例："}},[t._v("#")]),t._v(" 4. 案例：")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('\t1. 案例1_登录验证\n\t\t* 需求：\n\t\t\t1. 访问day17_case案例的资源。验证其是否登录\n\t\t\t2. 如果登录了，则直接放行。\n\t\t\t3. 如果没有登录，则跳转到登录页面，提示"您尚未登录，请先登录"。\n')])])]),n("p",[n("img",{attrs:{src:"/java/javaweb/Filter&Listener%E7%AC%94%E8%AE%B0_files/2.jpg",alt:"案例1——登录验证"}})]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('\t\t\t4.代码\n\t\t\t<pre>\n\t\t\t//强制转换\n\t\t\t        HttpServletRequest request = (HttpServletRequest) req;\n\t\t\t\n\t\t\t        //获取资源请求路径\n\t\t\t        String uri = request.getRequestURI();\n\t\t\t        //判断是否包含登录相关资源路径\n\t\t\t        if (uri.contains("/login.jsp") || uri.contains("/loginServlet")\n\t\t\t                || uri.contains("/css/")|| uri.contains("/fonts/")\n\t\t\t                || uri.contains("/vendor/") || uri.contains("/checkCodeServlet")\n\t\t\t                || uri.contains("/images/")|| uri.contains("/js/")){\n\t\t\t            //包含登录相关\n\t\t\t            chain.doFilter(req,resp);\n\t\t\t        }else {\n\t\t\t            //不包含\n\t\t\t            //从session中获取user\n\t\t\t            Object user = request.getSession().getAttribute("user");\n\t\t\t            System.out.println(user);\n\t\t\t            if (user == null){\n\t\t\t                //未登录\n\t\t\t                request.setAttribute("login_msg","您尚未登录");\n\t\t\t                request.getRequestDispatcher("/login.jsp").forward(request,resp);\n\t\t\t            }else {\n\t\t\t                chain.doFilter(req,resp);\n\t\t\t            }\n\t\t\t\n\t\t\t        }\n\t\t\t</pre>\n\n\t2. 案例2_敏感词汇过滤\n\t\t* 需求：\n\t\t\t1. 对day17_case案例录入的数据进行敏感词汇过滤\n\t\t\t2. 敏感词汇参考《敏感词汇.txt》\n\t\t\t3. 如果是敏感词汇，替换为 *** \n')])])]),n("p",[n("img",{attrs:{src:"/java/javaweb/Filter&Listener%E7%AC%94%E8%AE%B0_files/3.jpg",alt:"过滤敏感词"}})]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("\t\t\t4.代码：\n\t\t\t<pre>\n\t\t\t\n\t\t\t</pre>\n\t\t* 分析：\n\t\t\t1. 对request对象进行增强。增强获取参数相关方法\n\t\t\t2. 放行。传递代理对象\n\n\n\t\t* 增强对象的功能：\n\t\t\t* 设计模式：一些通用的解决固定问题的方式\n\t\t\t1. 装饰模式\n\t\t\t2. 代理模式\n\t\t\t\t* 概念：\n\t\t\t\t\t1. 真实对象：被代理的对象\n\t\t\t\t\t2. 代理对象：\n\t\t\t\t\t3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的\n\t\t\t \t* 实现方式：\n\t\t\t\t \t1. 静态代理：有一个类文件描述代理模式\n\t\t\t\t \t2. 动态代理：在内存中形成代理类\n\t\t\t\t\t\t* 实现步骤：\n\t\t\t\t\t\t\t1. 代理对象和真实对象实现相同的接口\n\t\t\t\t\t\t\t2. 代理对象 = Proxy.newProxyInstance();\n\t\t\t\t\t\t\t3. 使用代理对象调用方法。\n\t\t\t\t\t\t\t4. 增强方法\n\n\t\t\t\t\t\t* 增强方式：\n\t\t\t\t\t\t\t1. 增强参数列表\n\t\t\t\t\t\t\t2. 增强返回值类型\n\t\t\t\t\t\t\t3. 增强方法体执行逻辑\t\n")])])]),n("p",[n("img",{attrs:{src:"/java/javaweb/Filter&Listener%E7%AC%94%E8%AE%B0_files/4.jpg",alt:"代理"}})]),t._v(" "),n("h2",{attrs:{id:"listener：监听器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#listener：监听器"}},[t._v("#")]),t._v(" Listener：监听器")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('* 概念：web的三大组件之一。\n\t* 事件监听机制\n\t\t* 事件\t：一件事情\n\t\t* 事件源 ：事件发生的地方\n\t\t* 监听器 ：一个对象\n\t\t* 注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码\n\n\n* ServletContextListener:监听ServletContext对象的创建和销毁\n\t* 方法：\n\t\t* void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法\n\t\t* void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法\n\t* 步骤：\n\t\t1. 定义一个类，实现ServletContextListener接口\n\t\t2. 复写方法\n\t\t3. 配置\n\t\t\t1. web.xml\n\t\t\t\t\t<listener>\n \t\t\t\t\t <listener-class>cn.itcast.web.listener.ContextLoaderListener</listener-class>\n\t\t\t\t\t</listener>\n\n\t\t\t\t\t* 指定初始化参数<context-param>\n\t\t\t2. 注解：\n\t\t\t\t* @WebListener\n\t\t\t\t\t\n\t\t4.代码\n\t\t\n\t\t@WebListener()\n\t\tpublic class ContextLoaderListener implements ServletContextListener{\n\t\t    @Override\n\t\t    public void contextDestroyed(ServletContextEvent sce) {\n\t\t        System.out.println("ServletContext对象被销毁了。。。");\n\t\t    }\n\t\t\n\t\t    @Override\n\t\t    public void contextInitialized(ServletContextEvent sce) {\n\t\t        System.out.println("ServletContext对象被创建了。。。");\n\t\t    }\n\t\t}\n')])])])])}),[],!1,null,null,null);e.default=s.exports}}]);