(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{351:function(t,n,e){"use strict";e.r(n);var s=e(33),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"mysql-days04"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-days04"}},[t._v("#")]),t._v(" Mysql days04")]),t._v(" "),e("h2",{attrs:{id:"_1、约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、约束"}},[t._v("#")]),t._v(" 1、约束")]),t._v(" "),e("h3",{attrs:{id:"_1-1、唯一性约束-unique"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、唯一性约束-unique"}},[t._v("#")]),t._v(" 1.1、唯一性约束(unique)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("* 唯一性约束修饰的字段具有唯一性，不能重复。但可以为null。\n* 案例：给某一列添加unique\n\ndrop table if exists t_user;\ncreate table t_user(\n\tid int,\nusername varchar(255) unique  //列级约束\n);\ninsert into t_user values(1,'zhangsan');\t\t\ninsert into t_user values(2,'zhangsan');  //出现编译错误，唯一性约束，该字段与上一行字段重复，但可以为null！\nERROR 1062 (23000) : Duplicate entry 'zhangsan' for key 'username'\n\ninsert into t_user(id) values(2);\n\tinsert into t_user(id) values(3);\ninsert into t_user(id) values(4);\n*案例：给两个列或者多个列添加unique\n\tdrop table if exists t_user;\ncreate table t_user(\n\tid int,\n\tusercode varchar(255),\n\tusername varchar(255),\n\tunique(usercode,username)  //多个字段联合起来添加一个约束unique 【表级约束】\n  );\n\ninsert into t_user values(1,'111','zs');\ninsert into t_user values(2,'111','ls');\ninsert into t_user values(3,'222','zs');\nselect * from t_user;\ninsert into t_user values(4,'111','zs');  //出现编译错误！\nERROR 1062 (23000) : Duplicate entry '111-zs' for key 'usercode'\n\ndrop table if exists t_user;\ncreate table t_suer(\n\tid int,\n\tusercode varchar(255) unique,\n\tusername varchar(255) unique\n  );\ninsert into t_user values(1,'111','zs');\ninsert into t_user values(2,'111','ls');\nERROR 1062 (23000) : Duplicate entry '111' for key 'usercode'\n* 注意：not null约束只有列级约束，没有表级约束。\n")])])]),e("h3",{attrs:{id:"_1-2、主键约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、主键约束"}},[t._v("#")]),t._v(" 1.2、主键约束")]),t._v(" "),e("h4",{attrs:{id:"怎么给一张表添加主键约束呢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#怎么给一张表添加主键约束呢？"}},[t._v("#")]),t._v(" 怎么给一张表添加主键约束呢？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  drop table if exists t_user;\n  create table t_user(\n\t  id int primary key,  //列级约束\n  username varchar(255),\n  email varchar(255)\n  );\n  insert into t_user(id,username,email) values(1,'zs','zs@123.com');\n  insert into t_user(id,username,email) values(2,'ls','ls@123.com');\n  insert into t_user(id,username,email) values(3,'ww','ww@123.com');\n  select * from t_user;\n\t\n  +-----------------------------+\n  | id | username | email       |\n  +-----------------------------+\n  |  1 | zs       | zs@123.com  |\n  |  2 | ls       | ls@123.com  |\n  |  3 | ww       | ww@123.com  |\n  +----+----------+-------------+\n\n\n  insert into t_user(id,username,email) values(1,'jack','jack@123.com');  //出现编译错误，主键约束，不能为null也不能重复！\n  ERROR 1364 (HY000) : Field 'id' doesn't have a default value\n\n  根据以上的测试得出：id是主键，因为添加了主键约束，主键字段中的数据不能为null，也不能重复。\n  主键的特点：不能为null，也不能重复。\n")])])]),e("h4",{attrs:{id:"主键相关的术语？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主键相关的术语？"}},[t._v("#")]),t._v(" 主键相关的术语？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  主键约束 ：primary key\n  主键字段 : id字段添加primary key之后，id叫做主键字段\n  主键值 ：id字段中的每一个值都是主键值。\n")])])]),e("h4",{attrs:{id:"主键有什么作用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主键有什么作用？"}},[t._v("#")]),t._v(" 主键有什么作用？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  根据主键字段的字段数量来划分：\n\t  单一主键 (推荐的，常用的。)\n  复合主键(多个字段联合起来添加一个主键约束) (复合主键不建议使用，因为复合主键违背三范式。)\n  根据主键性质来划分：\n\t  自然主键 ：主键值最好就是一个和业务没有任何关系的自然数。(这种方式是推荐的)\n  业务主键 : 主键值和系统的业务挂钩，例如：拿着银行卡的卡号做主键、拿着身份证号做为主键。(不推荐使用)\n\t\t\t 最好不要拿着和业务挂钩的字段做为主键。因为以后的业务一旦发生改变的时候，主键也可能需要随着\n\t\t 发生变化，但有的时候没有办法变化，因为变化可能会导致主键重复。\n")])])]),e("h4",{attrs:{id:"一张表的主键约束只能有1个。-必须记住"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一张表的主键约束只能有1个。-必须记住"}},[t._v("#")]),t._v(" 一张表的主键约束只能有1个。(必须记住)")]),t._v(" "),e("h4",{attrs:{id:"使用表级约束方式定义主键："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用表级约束方式定义主键："}},[t._v("#")]),t._v(" 使用表级约束方式定义主键：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  drop table if exists t_user;\n  create table t_user(\n\t  id int,\n  username varchar(255),\n  primary key(id)\n);\ninsert into t_user(id,username) values(1,'zs');\ninsert into t_user(id,username) values(2,'ls');\ninsert into t_user(id,username) values(3,'ws');\ninsert into t_user(id,username) values(4,'cs');\nselect * from t_user;\n\ninsert into t_user(id,username) values(3,'cx');  //出现编译错误！\nERROR 1062 (23000) : Duplicate entry '4' for key 'PRIMARY'\n\n以下内容是演示一下复合主键，不需要掌握：\n\tdrop table if exists t_user;\n\tcreate table t_user(\n\t\tid int,\n\tusername varchar(255),\n\tpassword varchar(255),\n\tprimary key(id,username)\n\t );\n\tinsert ......\n")])])]),e("h4",{attrs:{id:"mysql提供主键值自增：-非常重要。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql提供主键值自增：-非常重要。"}},[t._v("#")]),t._v(" mysql提供主键值自增：(非常重要。)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  drop table if exists t_user;\n  create table t_user(\n\t  id int primary key auto_increment,  //id字段自动维护一个自增的数字，从1开始，以1递增。\n  username varchar(255)\n\t);\n  insert into t_user(username) values('a'); \n  insert into t_user(username) values('b');\n  insert into t_user(username) values('c');\n  insert into t_user(username) values('d');\n  insert into t_user(username) values('e');\n  insert into t_user(username) values('f');\n  select * from t_user;\n\n  提示：Oracle当中也提供了一个自增机制，叫做：序列(sequence)对象。\n")])])]),e("h3",{attrs:{id:"_1-3、外键约束"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-3、外键约束"}},[t._v("#")]),t._v(" 1.3、外键约束")]),t._v(" "),e("h4",{attrs:{id:"关于外键约束的相关术语："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于外键约束的相关术语："}},[t._v("#")]),t._v(" 关于外键约束的相关术语：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  外键约束：foreign key\n  外键字段：添加有外键约束的字段\n  外键值：外键字段中的每一个值。\n")])])]),e("h4",{attrs:{id:"业务背景："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#业务背景："}},[t._v("#")]),t._v(" 业务背景：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  请设计数据库表，用来维护学生和班级的信息？\n\t  第一种方案：一张表存储所有数据\n  no(pk)          name          classno         classname\n  -----------------------------------------------------------\n   1               zs1            101          河南省平顶山市舞钢市垭口一高高三1班         \n   2               zs2            101          河南省平顶山市舞钢市垭口一高高三1班 \n   3               zs3            102          河南省平顶山市舞钢市垭口一高高三2班 \n   4               zs4            102          河南省平顶山市舞钢市垭口一高高三2班\n   5               zs5            102          河南省平顶山市舞钢市垭口一高高三2班 \n   缺点：冗余。【不推荐】\n\n   第二种方案：两张表(班级表和学生表)\n\n   t_class 班级表\n   cno(pk)         cname\n   -------------------------------------------------------------\n\t\t101           河南省平顶山市舞钢市垭口一高高三1班 \n\t102           河南省平顶山市舞钢市垭口一高高三2班 \n\n\tt_student 学生表\n\tsno(pk)        sname          classno(该字段添加外键约束fk)\n\t-----------------------------------------------------------\n\t 1              zs1              101\n\t 2              zs2              101\n\t 3              zs3              102\n\t 4              zs4              102\n\t 5              zs5              102\n")])])]),e("h4",{attrs:{id:"将以上表的建表语句写出来："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将以上表的建表语句写出来："}},[t._v("#")]),t._v(" 将以上表的建表语句写出来：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  t_student中的classno字段引用t_class表中的cno字段，此时t_student表叫做子表。t_class表叫做父表。\n  \n  删除数据的时候，先删除子表，再删除父表。\n  添加数据的时候，先添加父表，再添加子表。\n  创建表的时候，先创建父表，再创建子表。\n  删除表的时候，先删除子表，再删除父表。\n\ndrop table if exists t_student;\ndrop table if exists t_class;\n\ncreate table t_class(\n   cno int,\n   cname varchar(255),\n   primary key(cno)\n );\n\ncreate table t_student(\n\tsno int,\nsname varchar(255),\nclassno int,\nprimary key(sno),\nforeign key(classno) references t_class(cno)\n  );\n\ninsert into t_class values(101,'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');\ninsert into t_class values(102,'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy');\n\ninsert into t_student values(1,'zs1',101);\ninsert into t_student values(2,'zs2',101);\ninsert into t_student values(3,'zs3',102);\ninsert into t_student values(4,'zs4',102);\ninsert into t_student values(5,'zs5',102);\ninsert into t_student values(6,'zs6',102);\nselect * from t_class;\nselect * from t_student;\n\ninsert into t_student values(7,'lisi',103);  //编译错误，引用的103，父表中没有该字段！\nERROR 1452 (23000) : Cannot add or update a child row :aforeign key constraint fails (bjpowernode INT YT......)\n")])])]),e("h4",{attrs:{id:"外键值可以为null？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#外键值可以为null？"}},[t._v("#")]),t._v(" 外键值可以为NULL？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  外键可以为null。\n")])])]),e("h4",{attrs:{id:"外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？"}},[t._v("#")]),t._v(" 外键字段引用其他表的某个字段的时候，被引用的字段必须是主键吗？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("  注意：被引用的字段不一定是主键，但至少是具有unique约束，具有唯一性，不可重复！\n")])])]),e("h2",{attrs:{id:"_2、存储引擎？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、存储引擎？"}},[t._v("#")]),t._v(" 2、存储引擎？")]),t._v(" "),e("h4",{attrs:{id:"_2-1、完整的建表语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、完整的建表语句"}},[t._v("#")]),t._v(" 2.1、完整的建表语句")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   CREATE TABLE `t_x` (\n  `id` int(11) DEFAULT NULL\n ) ENGINE=InnoDB DEFAULT CHARSET=utf8; \n\n 注意：在MySQL当中，凡是标识符使用飘号括起来的。最好别用，不通用。\n\n 建表的时候可以指定存储引擎，也可以指定字符集。\n\n mysql默认使用的存储引擎是InnoDB方式。\n 默认采用的字符集是UTF-8。\n")])])]),e("h3",{attrs:{id:"_2-2、什么是存储引擎呢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、什么是存储引擎呢？"}},[t._v("#")]),t._v(" 2.2、什么是存储引擎呢？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('   存储引擎这个名字只有在mysql中存在。(Oracle中有对应的机制，但不叫做存储引擎。Oracle中没有特殊的名字，就是"表的存储方式")\n\n   mysql支持很多存储引擎，每个存储引擎都对应了一种不同的存储方式。\n   每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎。\n')])])]),e("h3",{attrs:{id:"_2-3、查看当前mysql支持的存储引擎？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、查看当前mysql支持的存储引擎？"}},[t._v("#")]),t._v(" 2.3、查看当前mysql支持的存储引擎？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   show engines \\G\n\n   mysql 5.5.36版本支持的光速引擎有9个：\n *************************** 1. row ***************************\n\t  Engine: FEDERATED\n\t Support: NO\n\t Comment: Federated MySQL storage engine\nTransactions: NULL\n\t  XA: NULL\n  Savepoints: NULL\n*************************** 2. row ***************************\n\t  Engine: MRG_MYISAM\n\t Support: YES\n\t Comment: Collection of identical MyISAM tables\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n*************************** 3. row ***************************\n\t  Engine: MyISAM\n\t Support: YES\n\t Comment: MyISAM storage engine\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n*************************** 4. row ***************************\n\t  Engine: BLACKHOLE\n\t Support: YES\n\t Comment: /dev/null storage engine (anything you write to it disappears)\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n*************************** 5. row ***************************\n\t  Engine: CSV\n\t Support: YES\n\t Comment: CSV storage engine\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n*************************** 6. row ***************************\n\t  Engine: MEMORY\n\t Support: YES\n\t Comment: Hash based, stored in memory, useful for temporary tables\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n*************************** 7. row ***************************\n\t  Engine: ARCHIVE\n\t Support: YES\n\t Comment: Archive storage engine\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n*************************** 8. row ***************************\n\t  Engine: InnoDB\n\t Support: DEFAULT\n\t Comment: Supports transactions, row-level locking, and foreign keys\nTransactions: YES\n\t  XA: YES\n  Savepoints: YES\n*************************** 9. row ***************************\n\t  Engine: PERFORMANCE_SCHEMA\n\t Support: YES\n\t Comment: Performance Schema\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n")])])]),e("h3",{attrs:{id:"_2-4、常见的存储引擎？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4、常见的存储引擎？"}},[t._v("#")]),t._v(" 2.4、常见的存储引擎？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   Engine: MyISAM\n\t Support: YES\n\t Comment: MyISAM storage engine\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n\n   MyISAM这种存储引擎不支持事务。\n   MyISAM是mysql最常用的存储引擎，但是这种存储引擎不是默认的。\n   MyISAM采用三个文件组织一个表：\n\t   xxx.frm(存储格式的文件)\n   xxx.MYD(存储表中数据的文件)\n   xxx.MYI(存储表中索引的文件)\n   优点：可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率。\n   缺点:不支持事务。\n\n--------------------------------------------------------------------------\n   \n\t   Engine: InnoDB\n\t Support: DEFAULT\n\t Comment: Supports transactions, row-level locking, and foreign keys\nTransactions: YES\n\t  XA: YES\n  Savepoints: YES\n   \n   优点：支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障。\n\n   表的结构存储在xxx.frm文件中\n   数据存储在tablespace这样的表空间中(逻辑概念)，无法被压缩，无法转换成只读。\n   这种InnoDB存储引擎在MySQL数据库崩溃之后提供自动恢复机制。\n   InoDB支持级联删除和级联更新。\n\n----------------------------------------------------------------------------------\n\n\t   Engine: MEMORY\n\t Support: YES\n\t Comment: Hash based, stored in memory, useful for temporary tables\nTransactions: NO\n\t  XA: NO\n  Savepoints: NO\n\n  缺点：不支持事务。数据容易丢失。因为所有数据和索引都是存储在内存当中的。\n  优点：查询速度最快。\n  以前叫做HEPA引擎。\n")])])]),e("h2",{attrs:{id:"_3、事务-transaction"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、事务-transaction"}},[t._v("#")]),t._v(" 3、事务(Transaction)")]),t._v(" "),e("h3",{attrs:{id:"_3-1、什么是事务？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1、什么是事务？"}},[t._v("#")]),t._v(" 3.1、什么是事务？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   一个事务是一个完整的业务逻辑单元，不可再分。\n\n   比如：银行账户，从A账户向B账户转账10000元，需要执行两条update语句。\n\t   update t_act set balance = balance - 10000 where actno = 'act-001';\n   update t_act set balance = balance + 10000 where actno = 'act-002';\n\n   以上两条DML语句必须同时成功，或者同时失败，不允许出现一条成功，一条失败。\n\n   想要保证以上的两条DML语句同时成功或者同时失败，那么就要使用数据库的\"事务机制\"。\n")])])]),e("h3",{attrs:{id:"_3-2、和事务相关的语句只有：dml语句。-insert-delete-update"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2、和事务相关的语句只有：dml语句。-insert-delete-update"}},[t._v("#")]),t._v(" 3.2、和事务相关的语句只有：DML语句。(insert delete update)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('   为什么？因为他们这三个语句都是和数据库表当中的"数据"相关的。\n   事务的存在是为了保证数据的完整性，安全性。\n')])])]),e("h3",{attrs:{id:"_3-3、假设所有的业务都能使用1条dml语句搞定，还需要事务机制吗？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3、假设所有的业务都能使用1条dml语句搞定，还需要事务机制吗？"}},[t._v("#")]),t._v(" 3.3、假设所有的业务都能使用1条DML语句搞定，还需要事务机制吗？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('   不需要事务机制。\n   但实际情况不是这样的，通常一个"事儿(事务【业务】)"需要多条DML语句共同联合完成。\n')])])]),e("h3",{attrs:{id:"_3-4、事务的特性？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4、事务的特性？"}},[t._v("#")]),t._v(" 3.4、事务的特性？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("事务包括四大特性：ACID\nA:原子性：事务是最小的工作单元，不可再分。\nB:一致性：事务必须保证多条DML语句同时成功或者同时失败。\nC:隔离性：事务A与事务B之间具有隔离。\nD:持久性：持久性说的是最终数据必须持久化到硬盘中，事务才算成功结束。\n")])])]),e("h3",{attrs:{id:"_3-5、关于事务之间的隔离性？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5、关于事务之间的隔离性？"}},[t._v("#")]),t._v(" 3.5、关于事务之间的隔离性？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   事务隔离性存在隔离级别，理论上隔离级别包括4个：\n\t   第一级别：读未提交(read uncommitted)\n\t   对方事务还没有提交，我们当前事务可以读取到对方未提交的数据。\n\t   读未提交存在脏读(Dirty Read) 现象：表示读到了脏数据。\n   第二级别：读已提交(read committed)\n\t   对方事务提交之后的数据我方可以读取到。\n\t   读已提交存在的问题是：不可重复读。\n   第三级别：可重复读(repeatable read)\n\t   这种隔离级别解决了：不可重复读问题。\n\t   这种隔离级别存在的问题是：读取到的数据是幻象。\n   第四级别：序列化读/串行化读\n\t   解决了所有问题。\n\t   效率低，需要事务排队。\n\n   Oracle数据库默认的隔离级别是：第二级别，读已提交。\n   mysql数据库默认的隔离级别是：第三级别，可重复读。\n")])])]),e("h3",{attrs:{id:"_3-6、演示事务："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6、演示事务："}},[t._v("#")]),t._v(" 3.6、演示事务：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v('   * mysql事务默认情况下是自动提交的。\n\t   (什么是自动提交？只要执行任意一条DML语句则提交一次。)怎么关闭默认提交？start transaction;\n\n   * 建表：\n\t   drop table if exists t_user;\n   create table t_user(\n\t   id int primary key auto_increment,\n\t   username varchar(255)\n\t );\n\n   * 演示：mysql中的事务是支持自动提交的，只要执行一条DML语句，则提交一次。\n\t   mysql> insert into t_user(username) values(\'zs\');\n   Querk OK, 1 row affected (0.03 sec)\n   mysql> select * from t_user;\n\t+----+----------+\n\t| id | username |\n\t+----+----------+\n\t|  1 | zs       |\n\t+----+----------+\n   mysql> rollback;\n   Query OK, 0 rows affected (0.00 sec)\n\n\t   mysql> select * from t_user;\n\t +----+----------+\n\t | id | username |\n\t +----+----------+\n\t |  1 | zs       |\n\t +----+----------+\n\n* 演示：使用start transaction; 关闭自动提交机制。\n\tmysql> select * from t_user;\n\t+----+----------+\n\t| id | username |\n\t+----+----------+\n\t|  1 | zs       |\n\t+----+----------+\n\t1 row in set (0.00 sec)\n\n\tmysql> start transaction;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\tmysql> insert into t_user(username) values("lisi");\n\tQuery OK, 1 row affected (0.00 sec)\n\n\tmysql> select * from t_user;\n\t+----+----------+\n\t| id | username |\n\t+----+----------+\n\t|  1 | zs       |\n\t|  2 | lisi     |\n\t+----+----------+\n\t2 rows in set (0.00 sec)\n\n\tmysql> insert into t_user(username) values("wangwu");\n\tQuery OK, 1 row affected (0.00 sec)\n\n\tmysql> select * from t_user;\n\t+----+----------+\n\t| id | username |\n\t+----+----------+\n\t|  1 | zs       |\n\t|  2 | lisi     |\n\t|  3 | wangwu   |\n\t+----+----------+\n\t3 rows in set (0.00 sec)\n\n\tmysql> rollback;    //回滚\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\tmysql> select * from t_user;\n\t+----+----------+\n\t| id | username |\n\t+----+----------+\n\t|  1 | zs       |\n\t+----+----------+\n\t1 row in set (0.00 sec)\n\n\tmysql> start transaction;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\tmysql> insert into t_user(username) values("wangwu");\n\tQuery OK, 1 row affected (0.00 sec)\n\n\tmysql> insert into t_user(username) values("object");\n\tQuery OK, 1 row affected (0.00 sec)\n\n\tmysql> insert into t_user(username) values("joke");\n\tQuery OK, 1 row affected (0.00 sec)\n\n\tmysql> insert into t_user(username) values("xiaozhaozhao");\n\tQuery OK, 1 row affected (0.00 sec)\n\n\tmysql> select * from t_user;\n\t+----+--------------+\n\t| id | username     |\n\t+----+--------------+\n\t|  1 | zs           |\n\t|  4 | wangwu       |\n\t|  5 | object       |\n\t|  6 | joke         |\n\t|  7 | xiaozhaozhao |\n\t+----+--------------+\n\t5 rows in set (0.00 sec)\n\n\tmysql> commit;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\tmysql> select * from t_user;\n\t+----+--------------+\n\t| id | username     |\n\t+----+--------------+\n\t|  1 | zs           |\n\t|  4 | wangwu       |\n\t|  5 | object       |\n\t|  6 | joke         |\n\t|  7 | xiaozhaozhao |\n\t+----+--------------+\n\t5 rows in set (0.00 sec)\n\n\tmysql> rollback;\n\tQuery OK, 0 rows affected (0.00 sec)\n\n\tmysql> select * from t_user;\n\t+----+--------------+\n\t| id | username     |\n\t+----+--------------+\n\t|  1 | zs           |\n\t|  4 | wangwu       |\n\t|  5 | object       |\n\t|  6 | joke         |\n\t|  7 | xiaozhaozhao |\n\t+----+--------------+\n\t5 rows in set (0.00 sec)\n\nrollback : 回滚。\ncommit ： 提交。\nstart transaction : 关闭自动提交机制。\n \n  -----------------------------------------------------------------\n\n* 演示两个事务，假如隔离级别：\n   演示第1级别：读未提交\n\t   set global transaction isolation level read uncommitted;\n   演示第二级别；读已提交\n\t   set global transaction isolation level read committed;\n   演示第三级别:可重复读\n\t   set global transaction isolation level repeatable read;\n\n*mysql远程登录：mysql -h192.168.151.18 -uroot -p444\n')])])]),e("h2",{attrs:{id:"_4、索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、索引"}},[t._v("#")]),t._v(" 4、索引")]),t._v(" "),e("h3",{attrs:{id:"_4-1、什么是索引？有什么用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1、什么是索引？有什么用？"}},[t._v("#")]),t._v(" 4.1、什么是索引？有什么用？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t索引就相当于一本书的目录，通过目录可以快速的找到对应的资源。\n在数据库方面，查询一张表的时候有两种检索方式：\n\t第一种方式：全表扫描\n\t第二种方式：根据索引检索(效率很高)\n索引为什么可以提高检索效率呢？\n\t其实最根本的原理是缩小了扫描的范围。\n\n索引虽然可以提高检索效率，但是不能随意的添加索引，因为索引也是数据库当中的对象，也需要数据库不断的维护。是有维护成本的。\n比如：表中的数据经常被修改，这样就不适合添加索引，因为数据一旦修改，索引需要重新排序，进行维护。\n\n添加索引是给某一个字段，或者说某些字段添加索引。\n\nselect ename,sal from emp where ename = 'SMITH';\n当ename字段没有添加索引的时候，以上sql语句会进行全表扫描，扫描ename字段中所有的值。\n当ename字段添加索引的时候，以上sql语句会根据索引扫描，快速定位。\n")])])]),e("h3",{attrs:{id:"_4-2、怎么创建索引对象？怎么删除索引对象？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2、怎么创建索引对象？怎么删除索引对象？"}},[t._v("#")]),t._v(" 4.2、怎么创建索引对象？怎么删除索引对象？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("创建索引对象：\n\tcreate index 索引名称 on 表名(字段名);\n删除索引对象：\n\tdrop index 索引名称 on 表名;\n")])])]),e("h3",{attrs:{id:"_4-3、什么时候考虑给字段添加索引？-满足什么条件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3、什么时候考虑给字段添加索引？-满足什么条件"}},[t._v("#")]),t._v(" 4.3、什么时候考虑给字段添加索引？(满足什么条件)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   * 数据量庞大。(根据客户的需求，根据线上的环境)\n   * 该字段很少的DML操作。(因为字段进行修改操作，索引也需要维护)\n   * 该字段经常出现在where子句中。(经常根据哪个字段维护)\n")])])]),e("h3",{attrs:{id:"_4-4、注意：主键具有unique约束的字段会自动添加索引。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4、注意：主键具有unique约束的字段会自动添加索引。"}},[t._v("#")]),t._v(" 4.4、注意：主键具有unique约束的字段会自动添加索引。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   根据主键查询效率较高，尽量根据主键检索。\n")])])]),e("h3",{attrs:{id:"_4-5、查看sql语句的执行计划："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5、查看sql语句的执行计划："}},[t._v("#")]),t._v(" 4.5、查看sql语句的执行计划：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   mysql> explain select ename,sal from emp where sal = 5000;\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra       |\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n|  1 | SIMPLE      | emp   | ALL  | NULL          | NULL | NULL    | NULL |   14 | Using where |\n+----+-------------+-------+------+---------------+------+---------+------+------+-------------+\n\n给薪资sal字段添加索引：\n\tcreate index emp_sal_index on emp(sal);\n\nmysql> explain select ename,sal from emp where sal = 5000;\n+----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+\n| id | select_type | table | type | possible_keys | key           | key_len | ref   | rows | Extra       |\n+----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+\n|  1 | SIMPLE      | emp   | ref  | emp_sal_index | emp_sal_index | 9       | const |    1 | Using where |\n+----+-------------+-------+------+---------------+---------------+---------+-------+------+-------------+\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  rows检索次数减少了\n")])])]),e("h3",{attrs:{id:"_4-6、索引底层采用的数据结构是：b-tree"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-6、索引底层采用的数据结构是：b-tree"}},[t._v("#")]),t._v(" 4.6、索引底层采用的数据结构是：B + Tree")]),t._v(" "),e("h3",{attrs:{id:"_4-7、索引的实现原理？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-7、索引的实现原理？"}},[t._v("#")]),t._v(" 4.7、索引的实现原理？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   通过B Tree缩小扫描范围，底层索引进行了排序，分区，索引会携带数据在表中的\"物理地址\"，最终通过索引检索到数据之后，获取到关联的物理地址，\n   通过物理索引检索到数据之后，获取到关联的物理地址，通过物理地址定位表中的数据，效率是最高的。\n\t   select ename from emp where ename = 'SMITH';\n   通过索引转换为：\n   select ename from emp where  物理地址 = 0x123;\n")])])]),e("h3",{attrs:{id:"_4-8、索引的分类？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-8、索引的分类？"}},[t._v("#")]),t._v(" 4.8、索引的分类？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   单一索引：给单个字段添加索引\n   复合索引：给多个字段联合起来添加一个索引\n   主键索引：主键上会自动添加索引\n   唯一索引：有unique约束的字段会自动添加索引\n   ......\n")])])]),e("h3",{attrs:{id:"_4-9、索引什么时候失效？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-9、索引什么时候失效？"}},[t._v("#")]),t._v(" 4.9、索引什么时候失效？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   select ename from emp where ename like ' %A% ';\n   模糊查询的时候，第一个通配符使用的是%，这个时候索引是是失效的。\n")])])]),e("h2",{attrs:{id:"_5、视图-view"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、视图-view"}},[t._v("#")]),t._v(" 5、视图(view)")]),t._v(" "),e("h3",{attrs:{id:"_5-1、什么是视图？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1、什么是视图？"}},[t._v("#")]),t._v(" 5.1、什么是视图？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   站在不同的角度去看到数据。(同一张表的数据，通过不同的角度去看待)\n")])])]),e("h3",{attrs:{id:"_5-2、怎么创建视图？怎么删除视图？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2、怎么创建视图？怎么删除视图？"}},[t._v("#")]),t._v(" 5.2、怎么创建视图？怎么删除视图？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("create view myview as select empno,ename from emp;\ndrop view myview;\n\n注意：只有DQL语句才能以试图对象的方式创建出来。\n")])])]),e("h3",{attrs:{id:"_5-3、对试图进行增删改查，会影响到原表数据。-通过视图影响原表数据，不是直接操作的原表"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3、对试图进行增删改查，会影响到原表数据。-通过视图影响原表数据，不是直接操作的原表"}},[t._v("#")]),t._v(" 5.3、对试图进行增删改查，会影响到原表数据。(通过视图影响原表数据，不是直接操作的原表)")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("可以对试图进行CRUD操作。\n")])])]),e("h3",{attrs:{id:"_5-4、面向视图操作？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-4、面向视图操作？"}},[t._v("#")]),t._v(" 5.4、面向视图操作？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("mysql> select * from myview;\n+-------+--------+\n| empno | ename  |\n+-------+--------+\n|  7369 | SMITH  |\n|  7499 | ALLEN  |\n|  7521 | WARD   |\n|  7566 | JONES  |\n|  7654 | MARTIN |\n|  7698 | BLAKE  |\n|  7782 | CLARK  |\n|  7788 | SCOTT  |\n|  7839 | KING   |\n|  7844 | TURNER |\n|  7876 | ADAMS  |\n|  7900 | JAMES  |\n|  7902 | FORD   |\n|  7934 | MILLER |\n+-------+--------+\n\n  create table emp_bak as select * from emp;\n  create view myview1 as select empno,ename,sal from emp_bak;\n  update myview1 set ename = 'hehe',sal = 1 where empno 7369;  //通过视图修改原表数据。\n  delete from myview1 where empno = 7369;  //通过试图删除原表数据。\n")])])]),e("h3",{attrs:{id:"_5-5、试图的作用？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-5、试图的作用？"}},[t._v("#")]),t._v(" 5.5、试图的作用？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("   试图可以隐藏表的实现细节。保密级别较高的系统，数据库只对外提供相关的视图，java程序员只对视图对象进行CRUD。\n")])])]),e("h2",{attrs:{id:"_6、dba命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6、dba命令"}},[t._v("#")]),t._v(" 6、DBA命令")]),t._v(" "),e("h3",{attrs:{id:"_6-1、在数据库当中的数据导出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-1、在数据库当中的数据导出"}},[t._v("#")]),t._v(" 6.1、在数据库当中的数据导出")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t在windows的DOS命令窗口中执行： (导出整个库)\n\tmysqldump bjpowernode>D:\\bjpowernode.sql -uroot -p999\n在windows的dos命令窗口中执行：(导出数据库中指定的表)\n\tmysqldump bjpowernode emp>D:\\bjpowernode.sql -uroot -p999\n")])])]),e("h3",{attrs:{id:"_6-2、导入数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-2、导入数据"}},[t._v("#")]),t._v(" 6.2、导入数据")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\tcreate database bjpowernode;\nuse bjpowernode;\nsource D:\\bjpowernode.sql \n")])])]),e("h2",{attrs:{id:"_7、数据库设计三范式-重点内容，面试经常会问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7、数据库设计三范式-重点内容，面试经常会问"}},[t._v("#")]),t._v(" 7、数据库设计三范式(重点内容，面试经常会问)")]),t._v(" "),e("h3",{attrs:{id:"_7-1、什么是设计范式？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1、什么是设计范式？"}},[t._v("#")]),t._v(" 7.1、什么是设计范式？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("\t设计表的依据。按照这三个范式设计的表不会出现数据冗余。\n")])])]),e("h3",{attrs:{id:"_7-2、三范式都是哪些？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-2、三范式都是哪些？"}},[t._v("#")]),t._v(" 7.2、三范式都是哪些？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("第一范式：任何一张表都应该有主键，并且每一个字段原子性不可再分。\n\n第二范式：建立在第一范式的基础上，所有非主键字段完全依赖主键，不能产生部份依赖。\n\t多对多？三张表，关系表两个外键。\n\tt_student学生表\n\tsno(pk)       sname\n\t---------------------\n\t 1             张三\n\t 2             李四 \n\t 3             王五\n\n\t t_teacher 讲师表\n\t tno(pk)            tname\n\t ----------------------\n\t  1\t\t\t王老师\n\t  2\t\t\t张老师\n\t  3\t\t\t李老师\n\n\t  t_student_teacher_relation 学生讲师关系表\n\t  id(pk)        sno(fk)          tno(fk)\n\t  -------------------------------------------\n\t   1\t      1                 3\n\t   2\t      1\t\t\t1\n\t   3\t      2\t\t\t2\n\t   4\t      2\t\t\t3\n\t   5\t      3\t\t\t1\n\t   6\t      3\t\t\t3\n\n第三范式：建立在第二范式的基础上，所有非主键字段直接依赖主键，不能产生传递依赖。\n\t一对多？两张表，多的表加外键。\n\t班级t_class\n\tcno(pk)          cname\n\t--------------------------\n\t  1              班级1\n\t  2              班级2\n\n\t学生t_student\n\tsno(pk)         sname         classno(fk)\n\t--------------------------------------------\n\t 101\t     张1\t      1\n\t 102             张2\t      2\n\t 103\t     张3\t      2\n\t 104\t     张4\t      1\n\t 105\t     张5\t      2\n\n  提醒：在实际的开发中，以满足客户需求为主，有的时候会拿冗余换执行速度。\n")])])]),e("h3",{attrs:{id:"_7-3、一对一怎么设计？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-3、一对一怎么设计？"}},[t._v("#")]),t._v(" 7.3、一对一怎么设计？")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("一对一设计有两种方案：主键共享\nt_user_login 用户登陆表\nid(pk)       username        password\n----------------------------------------\n 1             zs                123\n 2             ls                456\n \n t_user_detail 用户详细信息表\n  id(pk+fk)         realname          tel          ...\n ----------------------------------------------------\n\t1              张三            11111111112234\n2\t       李四            12112523432412\n")])])]),e("h4",{attrs:{id:"一对一设计有两种方案-外键唯一。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一对一设计有两种方案-外键唯一。"}},[t._v("#")]),t._v(" 一对一设计有两种方案:外键唯一。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("t_user_login 用户登陆表\nid(pk)       username        password\n----------------------------------------\n 1             zs                123\n 2             ls                456\n \n t_user_detail 用户详细信息表\n  id(pk)         realname          tel            userid(fk+unique)      \n ----------------------------------------------------\n   1                张三         111111114          2\n   2\t        李四         121432412          1\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);